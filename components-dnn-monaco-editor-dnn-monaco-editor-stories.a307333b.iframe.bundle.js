"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[761],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var chunk_KKE3V3AL=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-KKE3V3AL.mjs"),actions=(...args)=>{let options=chunk_KKE3V3AL.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_KKE3V3AL.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_KKE3V3AL.aD)(namesObject[name],options)})),actionsObject};__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs")},"./src/components/dnn-monaco-editor/dnn-monaco-editor.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MonacoEditor:()=>MonacoEditor,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_monaco_editor_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_monaco_editor_stories={title:"Elements/Monaco Editor",component:"dnn-monaco-editor",tags:["autodocs"],parameters:{docs:{description:{component:"# dnn-monaco-editor\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property  | Attribute | Description                     | Type                                   | Default     |\n| --------- | --------- | ------------------------------- | -------------------------------------- | ----------- |\n| `options` | --        | Sets the monaco editor options. | `IStandaloneEditorConstructionOptions` | `undefined` |\n\n\n## Events\n\n| Event           | Description                         | Type                |\n| --------------- | ----------------------------------- | ------------------- |\n| `editorDidLoad` | Event to indicate editor has loaded | `CustomEvent<void>` |\n\n\n## Methods\n\n### `getValue() => Promise<string>`\n\nGet value of the current model attached to this editor.\n\n#### Returns\n\nType: `Promise<string>`\n\n\n\n### `setFocus() => Promise<void>`\n\nSet focus to editor\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n### `setValue(newValue: string) => Promise<void>`\n\nSets a new editor value.\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n### `updateLanguage(languageId: string) => Promise<void>`\n\nUpdate code language editor\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## CSS Custom Properties\n\n| Name                     | Description                           |\n| ------------------------ | ------------------------------------- |\n| `--monaco-editor-height` | height of the editor, default is 50vh |\n| `--monaco-editor-width`  | width of the editor, default is 100%  |\n\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n"}}},argTypes:{}},MonacoEditor=((0,dist.Nw)(),(()=>lit.dy`
<dnn-monaco-editor>
    <code>
export interface Employee{
  firstName: string;
  lastName: string;
  fullName(): string;
}
let employee: Employee = {
  firstName : "jane",
  lastName: "doe",
  fullName(): string{
    return this.firstName + " " + this.lastName;
  }
}
console.log(employee.firstName);
console.log(employee.lastName);
console.log(employee.fullName());
    </code>
</dnn-monaco-editor>
    `).bind({}));MonacoEditor.args={},MonacoEditor.parameters={...MonacoEditor.parameters,docs:{...MonacoEditor.parameters?.docs,source:{originalSource:'() => html`\n<dnn-monaco-editor>\n    <code>\nexport interface Employee{\n  firstName: string;\n  lastName: string;\n  fullName(): string;\n}\nlet employee: Employee = {\n  firstName : "jane",\n  lastName: "doe",\n  fullName(): string{\n    return this.firstName + " " + this.lastName;\n  }\n}\nconsole.log(employee.firstName);\nconsole.log(employee.lastName);\nconsole.log(employee.fullName());\n    </code>\n</dnn-monaco-editor>\n    `',...MonacoEditor.parameters?.docs?.source}}};const __namedExportsOrder=["MonacoEditor"]}}]);