{"version":3,"file":"dnn-vertical-splitview.js","sourceRoot":"","sources":["../../../src/components/dnn-vertical-splitview/dnn-vertical-splitview.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Prop, Element, State, Method, Event, EventEmitter } from '@stencil/core';\nimport { getMovementFromEvent } from \"../../utilities/mouseUtilities\";\n\n/**\n * @slot default - The split divider control you want to use.\n * @slot left - The content of the left pane.\n * @slot right - The content of the right pane.\n */\n@Component({\n  tag: 'dnn-vertical-splitview',\n  styleUrl: 'dnn-vertical-splitview.scss',\n  shadow: true,\n})\nexport class DnnVerticalSplitview {\n\n  /** The width of the splitter area. */\n  @Prop() splitterWidth = 16;\n\n  /** The percentage position of the splitter in the container. */\n  @Prop({mutable: true}) splitWidthPercentage = 30;\n  \n  private splitter!: HTMLButtonElement;\n\n  private resizeObserver: ResizeObserver;\n\n  /** Sets the width percentage of the divider */\n  @Method()\n  async setSplitWidthPercentage(newWidth: number) {\n    const panes = this.element.shadowRoot.querySelectorAll(\".pane\");\n    requestAnimationFrame(() => {\n      panes.forEach(pane => pane.classList.add(\"transition\"));\n      this.splitter.classList.add(\"transition\");\n      requestAnimationFrame(() => {\n        const fullWidth = this.element.getBoundingClientRect().width;\n        let newLeft = fullWidth * newWidth / 100;\n        if (newLeft < 0){\n          newLeft = 0;\n        }\n        if (newLeft > fullWidth){\n          newLeft = fullWidth;\n        }\n        this.leftWidth = newLeft;\n        this.rightWidth = fullWidth - newLeft;\n        setTimeout(() => {\n          panes.forEach(pane => pane.classList.remove(\"transition\"));\n          this.splitter.classList.remove(\"transition\");\n        }, 300);\n      });\n    });\n  }\n\n  /** Gets the current divider position percentage. */\n  @Method()\n  async getSplitWidthPercentage(){\n    const fullWidth = this.element.getBoundingClientRect().width;\n    return this.leftWidth / fullWidth;\n  }\n\n  /** Fires when the width of the divider changes. */\n  @Event() widthChanged: EventEmitter<number>;\n\n  @State() leftWidth = 0;\n  @State() rightWidth = 0;\n\n  @Element() element : HTMLDnnVerticalSplitviewElement;\n  \n  componentDidLoad() {\n    requestAnimationFrame(() => {\n      this.resizeObserver = new ResizeObserver(() => {\n        const fullWidth = this.element.getBoundingClientRect().width;\n        this.leftWidth = fullWidth * this.splitWidthPercentage / 100;\n        this.rightWidth = fullWidth - this.leftWidth;\n        this.widthChanged.emit(this.splitWidthPercentage);\n      });\n      this.resizeObserver.observe(this.element);\n    });\n  }\n  \n  private previousTouch: Touch;\n\n  private handleMouseDown(event: MouseEvent | TouchEvent) {\n    event.preventDefault();\n    const handleDrag = (ev: MouseEvent | TouchEvent) => {\n      requestAnimationFrame(() => {\n        let fullWidth = this.element.getBoundingClientRect().width;\n        let {movementX} = getMovementFromEvent(ev, this.previousTouch);\n        let newLeft = this.leftWidth + movementX;\n        if (newLeft < 0){\n          newLeft = 0;\n        }\n        if (newLeft > fullWidth){\n          newLeft = fullWidth;\n        }\n        this.leftWidth = newLeft;\n        this.rightWidth = fullWidth - newLeft;\n        this.splitWidthPercentage = this.leftWidth / fullWidth * 100;\n      });\n    }\n    const handleDragFinished = () => {\n      document.removeEventListener(\"mousemove\", handleDrag);\n      document.removeEventListener(\"touchmove\", handleDrag);\n      const fullWidth = this.element.getBoundingClientRect().width;\n      const newPercentage = this.leftWidth / fullWidth * 100;\n      this.widthChanged.emit(newPercentage);\n    };\n    document.addEventListener(\"mouseup\", handleDragFinished);\n    document.addEventListener(\"touchend\", handleDragFinished);\n    document.addEventListener(\"mousemove\", handleDrag);\n    document.addEventListener(\"touchmove\", handleDrag);\n  }\n\n  private handleKeyDown(e: KeyboardEvent): void {\n    let movementX = 0;\n    switch (e.key) {\n      case \"ArrowLeft\":\n        movementX = -10;\n        break;\n      case \"ArrowRight\":\n        movementX = 10;\n        break;\n      default:\n        return;\n    }\n    if (e.shiftKey){\n      movementX = movementX * 10;\n    }\n    const fullWidth = this.element.getBoundingClientRect().width;\n    let newLeft = this.leftWidth + movementX;\n    if (newLeft < 0){\n      newLeft = 0;\n    }\n    if (newLeft > fullWidth){\n      newLeft = fullWidth;\n    }\n    this.leftWidth = newLeft;\n    this.rightWidth = fullWidth - this.leftWidth;\n  }\n\n  render() {\n    return (\n      <Host>\n          <div class=\"left pane\" style={{\n              width: `${this.leftWidth}px`,\n            }}>\n            <slot name=\"left\"></slot>\n          </div>\n          <button\n            onMouseDown={e => this.handleMouseDown(e)}\n            onTouchStart={e => this.handleMouseDown(e)}\n            onKeyDown={e => this.handleKeyDown(e)}\n            ref={el => this.splitter = el}\n            style={{\n              minWidth: `${this.splitterWidth.toString()}px`,\n              left: `${this.leftWidth - 2}px`,\n            }}\n          >\n            <slot></slot>\n          </button>\n          <div\n            class=\"right pane\"\n            style={{\n              width: `${this.rightWidth}px`,\n            }}>\n            <slot name=\"right\"></slot>\n          </div>\n      </Host>\n    );\n  }\n}\n"]}