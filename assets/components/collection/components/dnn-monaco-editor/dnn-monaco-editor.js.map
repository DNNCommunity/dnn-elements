{"version":3,"file":"dnn-monaco-editor.js","sourceRoot":"","sources":["../../../src/components/dnn-monaco-editor/dnn-monaco-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import {Component, Element, Event, EventEmitter, h, Host, Method, Prop, Watch} from '@stencil/core';\nimport { escapeCode, unescapeCode } from './utils/code.utils';\nimport { editor } from 'monaco-editor/esm/vs/editor/editor.api';\nimport { worker as jsonWorker } from 'monaco-editor/esm/vs/language/json/json.worker.js?worker';\nimport { worker as cssWorker } from 'monaco-editor/esm/vs/language/css/css.worker.js?worker';\nimport { worker as htmlWorker } from 'monaco-editor/esm/vs/language/html/html.worker.js?worker';\nimport { worker as tsWorker } from 'monaco-editor/esm/vs/language/typescript/ts.worker.js?worker';\nimport { worker as editorWorker } from 'monaco-editor/esm/vs/editor/editor.worker.js?worker';\n\ndeclare const monaco: any;\n\n@Component({\n  tag: 'dnn-monaco-editor',\n  styleUrl: 'dnn-monaco-editor.scss',\n  shadow: true\n})\nexport class DnnMonacoEditor {\n  \n  @Element() el: HTMLDnnMonacoEditorElement;\n\n  /** Sets the monaco editor options. */\n  @Prop() options: editor.IStandaloneEditorConstructionOptions;\n\n  /** Event to indicate editor has loaded */\n  @Event() editorDidLoad: EventEmitter<void>;\n\n  /** Watch editor option changes */\n  @Watch('options')\n  onOptionsChange() {\n    this.editor?.updateOptions(this.mergeOptions());\n  }\n\n  /** Set focus to editor */\n  @Method()\n  async setFocus() {\n    this.editor?.focus();\n  }\n\n  /** Update code language editor */\n  @Method()\n  async updateLanguage(languageId: string) {\n    monaco.editor.setModelLanguage(this.editor?.getModel(), languageId);\n  }\n\n  /** Get value of the current model attached to this editor. */\n  @Method()\n  async getValue(){\n    return Promise.resolve(escapeCode(this.editor?.getValue()));\n  }\n\n  /**\n   * Sets a new editor value.\n   * @param newValue The new value to set.\n   */\n  @Method()\n  async setValue(newValue: string){\n    this.editor?.setValue(unescapeCode(newValue));\n  }\n\n  private mergeOptions(): editor.IStandaloneEditorConstructionOptions {\n    return {\n      ...this.defaultOptions,\n      ...(this.options || {})\n    };\n  }\n  \n  private editor: editor.IStandaloneCodeEditor;\n\n  private readonly defaultOptions: editor.IStandaloneEditorConstructionOptions = {\n    automaticLayout: true,\n    language: 'typescript',\n    lineNumbers: \"on\",\n    fixedOverflowWidgets: true,\n    useShadowDOM: true,\n    minimap: {\n      enabled: true\n    },\n    readOnly: false,\n    roundedSelection: false,\n    scrollBeyondLastLine: false,\n    theme: 'vs-dark',\n    wordWrap: 'wordWrapColumn',\n    wordWrapColumn: 80,\n    wrappingIndent: \"indent\",\n  };\n\n  async componentWillLoad() {\n    await this.loadMonacoEditor();\n  }\n\n  componentDidLoad() {\n    this.initializeEditor();\n  }\n\n  private getSlottetCode(){\n    const slottedCode: HTMLElement = this.el.querySelector(':scope > *:first-of-type');\n    return unescapeCode(slottedCode?.innerHTML.trim() || '');\n  }\n\n  private loadScript(src: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = () => resolve();\n      script.onerror = (error) => reject(error);\n      document.head.appendChild(script);\n    });\n  }\n\n  private getFullAssetPath(path: string): string {\n    const monacoDir = new URL(\"assets/monaco-editor\", import.meta.url);\n    const finalPath = new URL(path, `${monacoDir}/`);\n    \n    return finalPath.toString();\n  }\n\n  private async loadMonacoEditor() {\n    await this.loadScript(this.getFullAssetPath(\"loader.js\"));\n    await new Promise<void>(resolve => {\n      (window as any).require.config({\n        paths: { vs: this.getFullAssetPath(\"\") },\n      });\n      (window as any).require([\"vs/editor/editor.main\"], () => {\n        resolve();\n      });\n    });\n  }\n\n  private initializeEditor() {\n    const container = this.el.shadowRoot.querySelector('.editor-container');\n    if (container) {\n      // Configure worker URLs\n      (window as any).MonacoEnvironment = {\n        getWorker: function (_moduleId: string, label: string) {\n          if (label === 'json') {\n            return jsonWorker;\n          }\n          if (label === 'css' || label === 'scss' || label === 'less') {\n            return cssWorker;\n          }\n          if (label === 'html' || label === 'handlebars' || label === 'razor') {\n            return htmlWorker;\n          }\n          if (label === 'typescript' || label === 'javascript') {\n            return tsWorker;\n          }\n          return editorWorker;\n        },\n      };\n\n      this.editor = (window as any).monaco.editor.create(container as HTMLElement, {\n        value: this.getSlottetCode(),\n        ...this.mergeOptions(),\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div class=\"editor-container\"></div>\n      </Host>\n    );\n  }\n}"]}