import{h,Host}from"@stencil/core";import{escapeCode,unescapeCode}from"./utils/code.utils";import{worker as jsonWorker}from"monaco-editor/esm/vs/language/json/json.worker.js?worker";import{worker as cssWorker}from"monaco-editor/esm/vs/language/css/css.worker.js?worker";import{worker as htmlWorker}from"monaco-editor/esm/vs/language/html/html.worker.js?worker";import{worker as tsWorker}from"monaco-editor/esm/vs/language/typescript/ts.worker.js?worker";import{worker as editorWorker}from"monaco-editor/esm/vs/editor/editor.worker.js?worker";export class DnnMonacoEditor{constructor(){this.defaultOptions={automaticLayout:!0,language:"typescript",lineNumbers:"on",fixedOverflowWidgets:!0,useShadowDOM:!0,minimap:{enabled:!0},readOnly:!1,roundedSelection:!1,scrollBeyondLastLine:!1,theme:"vs-dark",wordWrap:"wordWrapColumn",wordWrapColumn:80,wrappingIndent:"indent"},this.options=void 0}onOptionsChange(){var _a;null===(_a=this.editor)||void 0===_a||_a.updateOptions(this.mergeOptions())}async setFocus(){var _a;null===(_a=this.editor)||void 0===_a||_a.focus()}async updateLanguage(languageId){var _a;monaco.editor.setModelLanguage(null===(_a=this.editor)||void 0===_a?void 0:_a.getModel(),languageId)}async getValue(){var _a;return Promise.resolve(escapeCode(null===(_a=this.editor)||void 0===_a?void 0:_a.getValue()))}async setValue(newValue){var _a;null===(_a=this.editor)||void 0===_a||_a.setValue(unescapeCode(newValue))}mergeOptions(){return Object.assign(Object.assign({},this.defaultOptions),this.options||{})}async componentWillLoad(){await this.loadMonacoEditor()}componentDidLoad(){this.initializeEditor()}getSlottetCode(){const slottedCode=this.el.querySelector(":scope > *:first-of-type");return unescapeCode((null==slottedCode?void 0:slottedCode.innerHTML.trim())||"")}loadScript(src){return new Promise(((resolve,reject)=>{const script=document.createElement("script");script.src=src,script.onload=()=>resolve(),script.onerror=error=>reject(error),document.head.appendChild(script)}))}getFullAssetPath(path){const monacoDir=new URL("assets/monaco-editor",import.meta.url);return new URL(path,`${monacoDir}/`).toString()}async loadMonacoEditor(){await this.loadScript(this.getFullAssetPath("loader.js")),await new Promise((resolve=>{window.require.config({paths:{vs:this.getFullAssetPath("")}}),window.require(["vs/editor/editor.main"],(()=>{resolve()}))}))}initializeEditor(){const container=this.el.shadowRoot.querySelector(".editor-container");container&&(window.MonacoEnvironment={getWorker:function(_moduleId,label){return"json"===label?jsonWorker:"css"===label||"scss"===label||"less"===label?cssWorker:"html"===label||"handlebars"===label||"razor"===label?htmlWorker:"typescript"===label||"javascript"===label?tsWorker:editorWorker}},this.editor=window.monaco.editor.create(container,Object.assign({value:this.getSlottetCode()},this.mergeOptions())))}render(){return h(Host,null,h("div",{class:"editor-container"}))}static get is(){return"dnn-monaco-editor"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["dnn-monaco-editor.scss"]}}static get styleUrls(){return{$:["dnn-monaco-editor.css"]}}static get properties(){return{options:{type:"unknown",mutable:!1,complexType:{original:"editor.IStandaloneEditorConstructionOptions",resolved:"IStandaloneEditorConstructionOptions",references:{editor:{location:"import",path:"monaco-editor/esm/vs/editor/editor.api"}}},required:!1,optional:!1,docs:{tags:[],text:"Sets the monaco editor options."}}}}static get events(){return[{method:"editorDidLoad",name:"editorDidLoad",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"Event to indicate editor has loaded"},complexType:{original:"void",resolved:"void",references:{}}}]}static get methods(){return{setFocus:{complexType:{signature:"() => Promise<void>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Set focus to editor",tags:[]}},updateLanguage:{complexType:{signature:"(languageId: string) => Promise<void>",parameters:[{tags:[],text:""}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Update code language editor",tags:[]}},getValue:{complexType:{signature:"() => Promise<string>",parameters:[],references:{Promise:{location:"global"}},return:"Promise<string>"},docs:{text:"Get value of the current model attached to this editor.",tags:[]}},setValue:{complexType:{signature:"(newValue: string) => Promise<void>",parameters:[{tags:[{name:"param",text:"newValue The new value to set."}],text:"The new value to set."}],references:{Promise:{location:"global"}},return:"Promise<void>"},docs:{text:"Sets a new editor value.",tags:[{name:"param",text:"newValue The new value to set."}]}}}}static get elementRef(){return"el"}static get watchers(){return[{propName:"options",methodName:"onOptionsChange"}]}}