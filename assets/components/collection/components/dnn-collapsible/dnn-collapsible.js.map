{"version":3,"file":"dnn-collapsible.js","sourceRoot":"","sources":["../../../src/components/dnn-collapsible/dnn-collapsible.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAgB,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAO9G,MAAM,OAAO,cAAc;;oBAKkB,KAAK;8BAGV,GAAG;;EAMzC,mBAAmB;IACjB,qBAAqB,CAAC,GAAG,EAAE;MACzB,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC,CAAC,CAAA;EACJ,CAAC;EAED;;KAEG;EAEH,KAAK,CAAC,UAAU;IACd,IAAI,IAAI,CAAC,QAAQ,EAAC;MACd,qBAAqB,CAAC,GAAG,EAAE;QACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,CAAC;MACtE,CAAC,CAAC,CAAC;MACH,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;MAC1C,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC/B;EACH,CAAC;EAGD,sBAAsB,CAAC,QAAiB;IACtC,IAAI,QAAQ,EAAC;MACX,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;SACG;MACF,qBAAqB,CAAC,GAAG,EAAE;QACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,CAAC;QACpE,qBAAqB,CAAC,GAAG,EAAE;UACzB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;QACzC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC;KACJ;IACD,UAAU,CAAC,GAAG,EAAE;MACd,qBAAqB,CAAC,GAAG,EAAE;QACzB,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;MAC1C,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;EAC9B,CAAC;EAID,gBAAgB;IACd,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG,cAAc,IAAI,CAAC,kBAAkB,gBAAgB,CAAC;EAC1F,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACH,WACE,EAAE,EAAC,WAAW,EACd,KAAK,EAAE,IAAI,CAAC,QAAQ,IAAI,UAAU,EAClC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,GAAG,EAAE,EAC9B,KAAK,EAAE,EAAC,UAAU,EAAE,cAAc,IAAI,CAAC,kBAAkB,gBAAgB,EAAC;QAExE,eAAa,CACX,CACD,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAEF","sourcesContent":["import { Component, Host, h, Prop, Element, Event, EventEmitter, Watch, Listen, Method } from '@stencil/core';\n\n@Component({\n  tag: \"dnn-collapsible\",\n  styleUrl: \"dnn-collapsible.scss\",\n  shadow: true\n})\nexport class DnnCollapsible {\n\n  @Element() el: HTMLDnnCollapsibleElement;\n\n  /** Defines if the panel is expanded or not. */\n  @Prop({reflect: true}) expanded: boolean = false;\n\n  /** Defines the transition time in ms, defaults to 150ms */\n  @Prop() transitionDuration?: number = 150;\n\n  /** Fires whenever the collapsible height has changed */\n  @Event({bubbles: true, composed: true}) dnnCollapsibleHeightChanged: EventEmitter<void>;\n\n  @Listen(\"dnnCollapsibleHeightChanged\")\n  handleHeightChanged(){\n    requestAnimationFrame(() => {\n      this.updateSize();\n    })\n  }\n\n  /**\n   * Updates the component height, use to update after a slot content changes.\n   */\n  @Method()\n  async updateSize() {\n    if (this.expanded){\n        requestAnimationFrame(() => {\n          this.container.style.maxHeight = `${this.container.scrollHeight}px`;\n        });\n        setTimeout(() => {\n          this.container.style.maxHeight = \"none\";\n        }, this.transitionDuration);\n    }\n  }\n  \n  @Watch(\"expanded\")\n  handledExpandedChanged(expanded: boolean){\n    if (expanded){\n      this.updateSize();\n    }\n    else{\n      requestAnimationFrame(() => {\n        this.container.style.maxHeight = `${this.container.scrollHeight}px`;\n        requestAnimationFrame(() => {\n          this.container.style.maxHeight = \"0px\";\n        });\n      });\n    }\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        this.dnnCollapsibleHeightChanged.emit();\n      });\n    }, this.transitionDuration);\n  }\n  \n  private container: HTMLDivElement;\n\n  componentDidLoad() {\n    this.container.style.transition = `max-height ${this.transitionDuration}ms ease-in-out`;\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          id=\"container\"\n          class={this.expanded && \"expanded\"}\n          ref={el => this.container = el}\n          style={{transition: `max-height ${this.transitionDuration}ms ease-in-out`}}\n        >\n            <slot></slot>\n        </div>\n      </Host>\n    );\n  }\n\n}\n"]}