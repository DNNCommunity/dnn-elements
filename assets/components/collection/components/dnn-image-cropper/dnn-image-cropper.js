import{Host,h}from"@stencil/core";import{CornerType}from"./CornerType";import{getMovementFromEvent}from"../../utilities/mouseUtilities";export class DnnImageCropper{constructor(){this.handleCropMouseDown=event=>{event.stopPropagation(),event.preventDefault();const className=event.target.classList[0];switch(document.addEventListener("mouseup",this.handleImageCropFinished,!1),document.addEventListener("touchend",this.handleImageCropFinished,!1),className){case"crop":document.addEventListener("mousemove",this.handleCropDrag,!1),document.addEventListener("touchmove",this.handleCropDrag,!1),document.addEventListener("mouseup",(()=>document.removeEventListener("mousemove",this.handleCropDrag))),document.addEventListener("touchend",(()=>document.removeEventListener("touchmove",this.handleCropDrag)));break;case"nw":document.addEventListener("mousemove",this.handleNwMouseMove,!1),document.addEventListener("touchmove",this.handleNwMouseMove,!1),document.addEventListener("mouseup",(()=>document.removeEventListener("mousemove",this.handleNwMouseMove))),document.addEventListener("touchend",(()=>document.removeEventListener("touchmove",this.handleNwMouseMove)));break;case"ne":document.addEventListener("mousemove",this.handleNeMouseMove,!1),document.addEventListener("touchmove",this.handleNeMouseMove,!1),document.addEventListener("mouseup",(()=>document.removeEventListener("mousemove",this.handleNeMouseMove))),document.addEventListener("touchend",(()=>document.removeEventListener("touchmove",this.handleNeMouseMove)));break;case"se":document.addEventListener("mousemove",this.handleSeMouseMove,!1),document.addEventListener("touchmove",this.handleSeMouseMove,!1),document.addEventListener("mouseup",(()=>document.removeEventListener("mousemove",this.handleSeMouseMove))),document.addEventListener("touchend",(()=>document.removeEventListener("touchmove",this.handleSeMouseMove)));break;case"sw":document.addEventListener("mousemove",this.handleSwMouseMove,!1),document.addEventListener("touchmove",this.handleSwMouseMove,!1),document.addEventListener("mouseup",(()=>document.removeEventListener("mousemove",this.handleSwMouseMove))),document.addEventListener("touchend",(()=>document.removeEventListener("touchmove",this.handleSwMouseMove)))}},this.handleImageCropFinished=_ev=>{this.emitImage(),document.removeEventListener("mouseup",this.handleImageCropFinished),this.previousTouch=void 0},this.handleNwMouseMove=event=>{this.handleCornerDrag(event,CornerType.nw)},this.handleNeMouseMove=event=>{this.handleCornerDrag(event,CornerType.ne)},this.handleSeMouseMove=event=>{this.handleCornerDrag(event,CornerType.se)},this.handleSwMouseMove=event=>{this.handleCornerDrag(event,CornerType.sw)},this.handleCornerDrag=(event,corner)=>{if(!this.isMouseStillInTarget(event))return;let{left,top}=this.getCornerLeftTop(corner),newWidth=0,newHeight=0,orientation="horizontal";const wantedRatio=this.width/this.height,cropRect=this.crop.getBoundingClientRect(),imageRect=this.image.getBoundingClientRect();let{movementX,movementY}=getMovementFromEvent(event,this.previousTouch);if(Math.abs(movementX)<Math.abs(movementY)&&(orientation="vertical"),"horizontal"==orientation)switch(corner){case CornerType.nw:case CornerType.sw:newWidth=cropRect.width-movementX,newHeight=newWidth/wantedRatio;break;case CornerType.ne:case CornerType.se:newWidth=cropRect.width+movementX,newHeight=newWidth/wantedRatio}else switch(corner){case CornerType.nw:case CornerType.ne:newHeight=cropRect.height-movementY,newWidth=newHeight*wantedRatio;break;case CornerType.se:case CornerType.sw:newHeight=cropRect.height+movementY,newWidth=newHeight*wantedRatio}switch(corner){case CornerType.ne:case CornerType.nw:const topOffset=cropRect.height-newHeight;top=this.crop.offsetTop+topOffset}switch(corner){case CornerType.nw:case CornerType.sw:const leftOffset=cropRect.width-newWidth;left=this.crop.offsetLeft+leftOffset,left<0&&(left=0),left>imageRect.width&&(left=imageRect.width),top<0&&(top=0),top>imageRect.height&&(top=imageRect.height),left+newWidth>imageRect.width&&(newWidth=imageRect.width-left),top+newHeight>imageRect.height&&(newHeight=imageRect.height-top);break;case CornerType.ne:case CornerType.se:top<0&&(top=0),top>imageRect.height&&(top=imageRect.height),left+newWidth>imageRect.width&&(newWidth=imageRect.width-left),top+newHeight>imageRect.height&&(newHeight=imageRect.height-top)}if(newWidth/newHeight==wantedRatio){if(this.preventUndersized){const zoomRatio=this.image.width/this.image.naturalWidth;if(newWidth/zoomRatio<this.width||newHeight/zoomRatio<this.height)return}switch(corner){case CornerType.ne:this.crop.style.top=`${top}px`,this.crop.style.width=`${newWidth}px`,this.crop.style.height=`${newHeight}px`;break;case CornerType.nw:this.crop.style.left=`${left}px`,this.crop.style.top=`${top}px`,this.crop.style.width=`${newWidth}px`,this.crop.style.height=`${newHeight}px`;break;case CornerType.se:this.crop.style.width=`${newWidth}px`,this.crop.style.height=`${newHeight}px`;break;case CornerType.sw:this.crop.style.left=`${left}px`,this.crop.style.width=`${newWidth}px`,this.crop.style.height=`${newHeight}px`}}},this.handleCropDrag=ev=>{if(!this.isMouseStillInTarget(ev))return;let{movementX,movementY}=getMovementFromEvent(ev,this.previousTouch),newLeft=this.crop.offsetLeft+movementX,newTop=this.crop.offsetTop+movementY;var imageRect=this.image.getBoundingClientRect(),cropRect=this.crop.getBoundingClientRect();newLeft<0&&(newLeft=0),newTop<0&&(newTop=0),newLeft+cropRect.width>imageRect.width&&(newLeft=this.crop.offsetLeft),newTop+cropRect.height>imageRect.height&&(newTop=this.crop.offsetTop),this.crop.style.left=newLeft+"px",this.crop.style.top=newTop+"px"},this.width=600,this.height=600,this.resx={capture:"Capture",dragAndDropFile:"Drag and drop an image",or:"or",takePicture:"Take a picture",uploadFile:"Upload an image",imageTooSmall:"The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.",modalCloseText:"Close"},this.quality=.8,this.preventUndersized=!1,this.view=void 0}componentDidLoad(){requestAnimationFrame((()=>{this.setView("noPictureView")}))}setView(newView){switch(this.host.shadowRoot.querySelectorAll(".view").forEach((v=>v.classList.remove("visible"))),newView){case"noPictureView":this.noPictureView.classList.add("visible");break;case"hasPictureView":this.hasPictureView.classList.add("visible")}this.view=newView}initCrop(){var wantedRatio=this.width/this.height,imageRect=this.image.getBoundingClientRect();if(wantedRatio>imageRect.width/imageRect.height){var wantedHeight=imageRect.width/wantedRatio,diff=imageRect.height-wantedHeight;this.crop.style.top=Math.round(diff/2).toString()+"px",this.crop.style.height=Math.round(wantedHeight).toString()+"px"}else{var wantedWidth=imageRect.height*wantedRatio;diff=imageRect.width-wantedWidth;this.crop.style.left=Math.round(diff/2).toString()+"px",this.crop.style.width=Math.round(wantedWidth).toString()+"px"}}setImage(){this.image.addEventListener("load",(()=>{this.initCrop(),this.emitImage()})),this.image.src=this.canvas.toDataURL()}handleNewFile(file){if("image"==file.type.split("/")[0]){var reader=new FileReader;reader.onload=readerLoadEvent=>{var img=new Image;img.onload=()=>{(this.canvas.width=img.width,this.canvas.height=img.height,this.preventUndersized&&(img.width<this.width||img.height<this.height))?this.imageTooSmallModal.show():(this.canvas.getContext("2d").drawImage(img,0,0),this.setView("hasPictureView"),this.setImage())},img.src=readerLoadEvent.target.result.toString()},reader.readAsDataURL(file)}}emitImage(){var x=this.crop.offsetLeft/this.image.width*this.image.naturalWidth,y=this.crop.offsetTop/this.image.height*this.image.naturalHeight,cropRect=this.crop.getBoundingClientRect(),width=cropRect.width/this.image.width*this.image.naturalWidth,height=cropRect.height/this.image.height*this.image.naturalHeight;x<0&&(x=0),x>this.image.naturalWidth&&(x=this.image.naturalWidth),y<0&&(y=0),y>this.image.naturalWidth&&(y=this.image.naturalWidth),width>this.image.naturalWidth&&(width=this.image.naturalWidth),height>this.image.naturalHeight&&(height=this.image.naturalHeight);var dataUrl=this.generateCroppedImage(x,y,width,height,this.width,this.height);this.imageCropChanged.emit(dataUrl)}generateCroppedImage(x,y,width,height,desiredWidth,desiredHeight){this.canvas.width=desiredWidth,this.canvas.height=desiredHeight;const context=this.canvas.getContext("2d");return context.clearRect(0,0,desiredWidth,desiredHeight),context.drawImage(this.image,x,y,width,height,0,0,desiredWidth,desiredHeight),this.canvas.toDataURL("image/jpeg",this.quality)}getCornerLeftTop(corner){let left=0,top=0;switch(corner){case CornerType.se:left=this.crop.offsetLeft,top=this.crop.offsetTop;break;case CornerType.sw:top=this.crop.offsetTop}return{top,left}}isMouseStillInTarget(event){var inside=!1;let mouseX,mouseY;const imageRect=this.image.getBoundingClientRect();if(event instanceof MouseEvent&&(mouseX=event.clientX,mouseY=event.clientY),"undefined"!=typeof TouchEvent&&event instanceof TouchEvent){var touch=event.touches[0];mouseX=touch.clientX,mouseY=touch.clientY}return mouseX>=imageRect.x&&mouseY>=imageRect.y&&mouseX<=imageRect.left+imageRect.width&&mouseY<=imageRect.top+imageRect.height&&(inside=!0),this.crop.querySelectorAll("div").forEach((corner=>{var cornerRect=corner.getBoundingClientRect();mouseX>=cornerRect.x&&mouseY>=cornerRect.y&&mouseX<=cornerRect.left+cornerRect.width&&mouseY<=cornerRect.top+cornerRect.height&&(inside=!0)})),inside}render(){return h(Host,{ref:el=>this.host=el},h("canvas",{ref:el=>this.canvas=el}),h("div",{class:"view",ref:el=>this.hasPictureView=el},h("div",{class:"cropper"},h("img",{ref:el=>this.image=el}),h("div",{class:"backdrop"}),h("div",{class:"crop",ref:e=>this.crop=e,onMouseDown:this.handleCropMouseDown,onTouchStart:this.handleCropMouseDown},h("div",{class:"nw"}),h("div",{class:"ne"}),h("div",{class:"se"}),h("div",{class:"sw"})))),h("div",{class:"view",ref:el=>this.noPictureView=el},h("dnn-dropzone",{allowCameraMode:!0,onFilesSelected:e=>this.handleNewFile(e.detail[0]),resx:{capture:this.resx.capture,dragAndDropFile:this.resx.dragAndDropFile,or:this.resx.or,takePicture:this.resx.takePicture,uploadFile:this.resx.uploadFile}})),h("dnn-modal",{ref:el=>this.imageTooSmallModal=el,"close-text":this.resx.modalCloseText},h("p",null,this.resx.imageTooSmall.replace("{width}",this.width.toString()).replace("{height}",this.height.toString()))))}static get is(){return"dnn-image-cropper"}static get encapsulation(){return"shadow"}static get originalStyleUrls(){return{$:["dnn-image-cropper.scss"]}}static get styleUrls(){return{$:["dnn-image-cropper.css"]}}static get properties(){return{width:{type:"number",mutable:!1,complexType:{original:"number",resolved:"number",references:{}},required:!1,optional:!1,docs:{tags:[],text:"Sets the desired final image width."},attribute:"width",reflect:!1,defaultValue:"600"},height:{type:"number",mutable:!1,complexType:{original:"number",resolved:"number",references:{}},required:!1,optional:!1,docs:{tags:[],text:"Sets the desired final image height."},attribute:"height",reflect:!1,defaultValue:"600"},resx:{type:"unknown",mutable:!1,complexType:{original:"{\n    capture: string;\n    dragAndDropFile: string;\n    or: string;\n    takePicture: string;\n    uploadFile: string;\n    imageTooSmall: string;\n    modalCloseText: string;\n  }",resolved:"{ capture: string; dragAndDropFile: string; or: string; takePicture: string; uploadFile: string; imageTooSmall: string; modalCloseText: string; }",references:{}},required:!1,optional:!1,docs:{tags:[],text:"Can be used to customize controls text.\nSome values support tokens, see default values for examples."},defaultValue:'{\n    capture: "Capture",\n    dragAndDropFile: "Drag and drop an image",\n    or: "or",\n    takePicture: "Take a picture",\n    uploadFile: "Upload an image",\n    imageTooSmall: "The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.",\n    modalCloseText: "Close",\n  }'},quality:{type:"number",mutable:!1,complexType:{original:"number",resolved:"number",references:{}},required:!1,optional:!1,docs:{tags:[],text:"Sets the output quality of the corpped image (number between 0 and 1)."},attribute:"quality",reflect:!1,defaultValue:"0.8"},preventUndersized:{type:"boolean",mutable:!1,complexType:{original:"boolean",resolved:"boolean",references:{}},required:!1,optional:!1,docs:{tags:[],text:"When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry."},attribute:"prevent-undersized",reflect:!1,defaultValue:"false"}}}static get states(){return{view:{}}}static get events(){return[{method:"imageCropChanged",name:"imageCropChanged",bubbles:!0,cancelable:!0,composed:!0,docs:{tags:[],text:"When the image crop changes, emits the dataurl for the new cropped image."},complexType:{original:"string",resolved:"string",references:{}}}]}}