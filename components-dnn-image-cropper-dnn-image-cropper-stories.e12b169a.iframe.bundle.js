/*! For license information please see components-dnn-image-cropper-dnn-image-cropper-stories.e12b169a.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[328],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var chunk_AY7I2SME=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-AY7I2SME.mjs"),actions=(...args)=>{let options=chunk_AY7I2SME.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_AY7I2SME.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_AY7I2SME.aD)(namesObject[name],options)})),actionsObject};__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs")},"./src/components/dnn-image-cropper/dnn-image-cropper.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ImageCropper:()=>ImageCropper,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_image_cropper_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_image_cropper_stories={title:"Elements/Image Cropper",component:"dnn-image-cropper",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-image-cropper\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Overview\n\nAllows cropping an image in-browser with the option to enforce a specific final size.\nAll computation happens in the browser and the final image is emmited\nin an event that has a data-url of the image.\n\n## Properties\n\n| Property            | Attribute            | Description                                                                                                                                 | Type                                                                                                                                                | Default                                                                                                                                                                                                                                                                                                                                                                                     |\n| ------------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `height`            | `height`             | Sets the desired final image height.                                                                                                        | `number`                                                                                                                                            | `undefined`                                                                                                                                                                                                                                                                                                                                                                                 |\n| `preventUndersized` | `prevent-undersized` | When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry. | `boolean`                                                                                                                                           | `false`                                                                                                                                                                                                                                                                                                                                                                                     |\n| `quality`           | `quality`            | Sets the output quality of the cropped image (number between 0 and 1).                                                                      | `number`                                                                                                                                            | `0.8`                                                                                                                                                                                                                                                                                                                                                                                       |\n| `resx`              | --                   | Can be used to customize controls text. Some values support tokens, see default values for examples.                                        | `{ capture: string; dragAndDropFile: string; or: string; takePicture: string; uploadFile: string; imageTooSmall: string; modalCloseText: string; }` | `{       capture: "Capture",       dragAndDropFile: "Drag and drop an image",       or: "or",       takePicture: "Take a picture",       uploadFile: "Upload an image",       imageTooSmall: "The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.",       modalCloseText: "Close",     }` |\n| `width`             | `width`              | Sets the desired final image width.                                                                                                         | `number`                                                                                                                                            | `undefined`                                                                                                                                                                                                                                                                                                                                                                                 |\n\n\n## Events\n\n| Event              | Description                                                               | Type                  |\n| ------------------ | ------------------------------------------------------------------------- | --------------------- |\n| `imageCropChanged` | When the image crop changes, emits the dataurl for the new cropped image. | `CustomEvent<string>` |\n\n\n## Methods\n\n### `clear() => Promise<void>`\n\nClears the current image and crop (resets the component).\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Dependencies\n\n### Depends on\n\n- [dnn-dropzone](../dnn-dropzone)\n- [dnn-modal](../dnn-modal)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-image-cropper --\x3e dnn-dropzone\n  dnn-image-cropper --\x3e dnn-modal\n  style dnn-image-cropper fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{width:{control:"number"},height:{control:"number"},allowedExtensions:{control:"text"},quality:{options:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1],control:"number"},preventUndersized:{control:"boolean"}}};(0,dist.Nw)("imageCropChanged");let dnn_image_cropper_stories_image="";const ImageCropper=(args=>lit.dy`
        <dnn-image-cropper id="cropper"
            .resx=${args.resx}
            width=${(0,if_defined.o)(args.width)}
            height=${(0,if_defined.o)(args.height)}
            allowed-extensions=${(0,if_defined.o)(args.allowedExtensions)}
            quality=${(0,if_defined.o)(args.captureQuality)}
            ?prevent-undersized=${(0,if_defined.o)(args.preventUndersized)}
            @imageCropChanged = ${e=>{dnn_image_cropper_stories_image=e.detail}}>
        </dnn-image-cropper>
        <div style = ${"display:grid; place-items:center"}>

            <button id="confirmCrop" style=${"margin:10px;"} @click=${()=>{document.querySelector("#cropper").style.display="none",document.querySelector("#confirmCrop").style.display="none",document.querySelector("#PostConfirmCrop").style.display="flex",document.querySelector("#displayImg").src=dnn_image_cropper_stories_image,document.querySelector("#link").href=dnn_image_cropper_stories_image}}>Confirm crop</button>
            
            
        </div>
        <!-- displayed after clicking Confirm Crop -->
        <div style=${"display:none; flex-direction:column;align-items: center; "} id="PostConfirmCrop">
            <img id="displayImg" style="margin:10px;" /> 
            <button style=${"margin:10px;"} @click=${()=>{window.location.reload()}}            
            >Change</button>         
            <a style=${"margin:10px;"} download="fakeImage.jpeg" id="link" >download</a>
        </div>
    `).bind({});ImageCropper.args={width:600,height:600,allowedExtensions:"jpg,jpeg,png,gif",quality:.8,preventUndersized:!1,resx:{capture:"Capture",dragAndDropFile:"Drag and drop an image",or:"or",takePicture:"Take a picture",uploadFile:"Upload an image",imageTooSmall:"The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.",modalCloseText:"Close"}},ImageCropper.parameters={...ImageCropper.parameters,docs:{...ImageCropper.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-image-cropper id="cropper"\n            .resx=${args.resx}\n            width=${ifDefined(args.width)}\n            height=${ifDefined(args.height)}\n            allowed-extensions=${ifDefined(args.allowedExtensions)}\n            quality=${ifDefined(args.captureQuality)}\n            ?prevent-undersized=${ifDefined(args.preventUndersized)}\n            @imageCropChanged = ${e => {\n  image = e.detail;\n}}>\n        </dnn-image-cropper>\n        <div style = ${"display:grid; place-items:center"}>\n\n            <button id="confirmCrop" style=${"margin:10px;"} @click=${() => {\n  (document.querySelector("#cropper") as HTMLDivElement).style.display = "none";\n  (document.querySelector("#confirmCrop") as HTMLButtonElement).style.display = "none";\n  (document.querySelector("#PostConfirmCrop") as HTMLDivElement).style.display = "flex";\n  (document.querySelector("#displayImg") as HTMLImageElement).src = image;\n  (document.querySelector("#link") as HTMLAnchorElement).href = image;\n}}>Confirm crop</button>\n            \n            \n        </div>\n        \x3c!-- displayed after clicking Confirm Crop --\x3e\n        <div style=${"display:none; flex-direction:column;align-items: center; "} id="PostConfirmCrop">\n            <img id="displayImg" style="margin:10px;" /> \n            <button style=${"margin:10px;"} @click=${() => {\n  window.location.reload();\n}}            \n            >Change</button>         \n            <a style=${"margin:10px;"} download="fakeImage.jpeg" id="link" >download</a>\n        </div>\n    `',...ImageCropper.parameters?.docs?.source}}};const __namedExportsOrder=["ImageCropper"]},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>l});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js"),l=l=>null!=l?l:_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.Ld}}]);