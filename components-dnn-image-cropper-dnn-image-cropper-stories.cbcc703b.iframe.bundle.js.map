{"version":3,"file":"components-dnn-image-cropper-dnn-image-cropper-stories.cbcc703b.iframe.bundle.js","mappings":";;;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;;;;AAWA;;AAEA;;AAIA;;AAOA","sources":["webpack://@dnncommunity/dnn-elements/./src/components/dnn-image-cropper/dnn-image-cropper.stories.ts"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/web-components';\nimport { html } from 'lit';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { actions } from '@storybook/addon-actions';\nimport readme from \"./readme.md\";\n\nconst meta: Meta = {\n    title: 'Elements/Image Cropper',\n    component: 'dnn-image-cropper',\n    tags: ['autodocs'],\n    parameters: {\n        docs: {\n            description: {\n              component: readme,\n            }\n        }\n    },\n    argTypes: {\n        width: {\n            control: 'number',\n        },\n        height: {\n            control: 'number',\n        },\n        allowedExtensions: {\n            control: 'text',\n        },\n        quality: {\n            options: [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],\n            control: 'number',\n        },\n        preventUndersized: {\n            control: 'boolean',\n          },\n        },\n} \n\nexport default meta;\n\nconst eventsFromNames = actions('imageCropChanged', );\nlet image:string = \"\";\nlet imageShowing:boolean = false;\n\n\nconst resx:{\n    capture: string;\n    dragAndDropFile: string;\n    or: string;\n    takePicture: string;\n    uploadFile: string;\n    imageTooSmall: string;\n    modalCloseText: string;\n} = {\n    capture: \"Capture\",\n    dragAndDropFile: \"Drag and drop an image\",\n    or: \"or\",\n    takePicture: \"Take a picture\",\n    uploadFile: \"Upload an image\",\n    imageTooSmall: \"The image you are attempting to upload does not meet the minimum size requirement of {width} pixels by {height} pixels. Please upload a larger image.\",\n    modalCloseText: \"Close\",\n}\n\nconst Template = (args) =>\n    html`\n        <dnn-image-cropper id=\"cropper\"\n            .resx=${args.resx}\n            width=${ifDefined(args.width)}\n            height=${ifDefined(args.height)}\n            allowed-extensions=${ifDefined(args.allowedExtensions)}\n            quality=${ifDefined(args.captureQuality)}\n            ?prevent-undersized=${ifDefined(args.preventUndersized)}\n            @imageCropChanged = ${ (e)=> { \n                image = e.detail \n            }}>\n        </dnn-image-cropper>\n        <div style = ${\"display:grid; place-items:center\"}>\n\n            <button id=\"confirmCrop\" style=${\"margin:10px;\"} @click=${() => {  \n                (document.querySelector(\"#cropper\") as HTMLDivElement ).style.display = \"none\";\n                (document.querySelector(\"#confirmCrop\") as HTMLButtonElement ).style.display = \"none\";\n                (document.querySelector(\"#PostConfirmCrop\") as HTMLDivElement ).style.display = \"flex\";\n                (document.querySelector(\"#displayImg\") as HTMLImageElement ).src = image;\n                (document.querySelector(\"#link\") as HTMLAnchorElement ).href = image;\n            }}>Confirm crop</button>\n            \n            \n        </div>\n        <!-- displayed after clicking Confirm Crop -->\n        <div style=${\"display:none; flex-direction:column;align-items: center; \"} id=\"PostConfirmCrop\">\n            <img id=\"displayImg\" style=\"margin:10px;\" /> \n            <button style=${\"margin:10px;\"} @click=${()=> {\n                window.location.reload();\n            }}            \n            >Change</button>         \n            <a style=${\"margin:10px;\"} download=\"fakeImage.jpeg\" id=\"link\" >download</a>\n        </div>\n    `\n    ;\n\ntype Story = StoryObj;\n\nexport const ImageCropper: Story = Template.bind({});\nImageCropper.args = {\n    width: 600,\n    height: 600,\n    allowedExtensions: 'jpg,jpeg,png,gif',\n    quality: 0.8,\n    preventUndersized: false,\n    resx,\n};"],"names":[],"sourceRoot":""}