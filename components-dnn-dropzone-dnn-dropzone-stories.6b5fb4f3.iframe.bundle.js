/*! For license information please see components-dnn-dropzone-dnn-dropzone-stories.6b5fb4f3.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[72],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var chunk_KKE3V3AL=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-KKE3V3AL.mjs"),actions=(...args)=>{let options=chunk_KKE3V3AL.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_KKE3V3AL.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_KKE3V3AL.aD)(namesObject[name],options)})),actionsObject};__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs")},"./src/components/dnn-dropzone/dnn-dropzone.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Dropzone:()=>Dropzone,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_dropzone_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_dropzone_stories={title:"Elements/Dropzone",component:"dnn-dropzone",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-dropzone\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property            | Attribute           | Description                                                                                                                                   | Type                                                                                                 | Default                                                                                                                                                        |\n| ------------------- | ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `allowCameraMode`   | `allow-camera-mode` | If true, will allow the user to take a snapshot using the device camera. (only works over https).                                             | `boolean`                                                                                            | `false`                                                                                                                                                        |\n| `allowedExtensions` | --                  | A list of allowed file extensions. If not specified, any file is allowed. Ex: ["jpg", "jped", "gif", "png"]                                   | `string[]`                                                                                           | `undefined`                                                                                                                                                    |\n| `captureQuality`    | `capture-quality`   | Specifies the jpeg quality for when the device camera is used to generate a picture. Needs to be a number between 0 and 1 and defaults to 0.8 | `number`                                                                                             | `0.8`                                                                                                                                                          |\n| `resx`              | --                  | Localization strings                                                                                                                          | `{ dragAndDropFile: string; capture: string; or: string; takePicture: string; uploadFile: string; }` | `{     dragAndDropFile: "Drag and drop a file",     capture: "Capture",     or: "or",     takePicture: "Take a picture",     uploadFile: "Upload a file",   }` |\n\n\n## Events\n\n| Event           | Description                    | Type                  |\n| --------------- | ------------------------------ | --------------------- |\n| `filesSelected` | Fires when file were selected. | `CustomEvent<File[]>` |\n\n\n## CSS Custom Properties\n\n| Name                      | Description                                          |\n| ------------------------- | ---------------------------------------------------- |\n| `--border-color`          | The color of the border.                             |\n| `--border-radius`         | The radius of the controls borders.                  |\n| `--drop-background-color` | The color of the background when a file is dropping. |\n\n\n## Dependencies\n\n### Used by\n\n - [dnn-image-cropper](../dnn-image-cropper)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-image-cropper --\x3e dnn-dropzone\n  style dnn-dropzone fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{allowedExtensions:{control:"text"},allowCameraMode:{control:"boolean"},captureQuality:{options:[0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1],control:"number"}}},Dropzone=((0,dist.Nw)("filesSelected"),(args=>lit.dy`
        <dnn-dropzone
            .resx=${args.resx}
            allowed-extensions=${(0,if_defined.o)(args.allowedExtensions)}
            ?allow-camera-mode=${(0,if_defined.o)(args.allCameraMode)}
            capture-quality=${(0,if_defined.o)(args.captureQuality)}>
        </dnn-dropzone>
    `).bind({}));Dropzone.args={allowedExtensions:"jpg,jpeg,png,gif",allowCameraMode:!1,captureQuality:.8,resx:{dragAndDropFile:"Drag and drop a file",capture:"Capture",or:"or",takePicture:"Take a picture",uploadFile:"Upload a file"}},Dropzone.parameters={...Dropzone.parameters,docs:{...Dropzone.parameters?.docs,source:{originalSource:"args => html`\n        <dnn-dropzone\n            .resx=${args.resx}\n            allowed-extensions=${ifDefined(args.allowedExtensions)}\n            ?allow-camera-mode=${ifDefined(args.allCameraMode)}\n            capture-quality=${ifDefined(args.captureQuality)}>\n        </dnn-dropzone>\n    `",...Dropzone.parameters?.docs?.source}}};const __namedExportsOrder=["Dropzone"]},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>l});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js"),l=l=>null!=l?l:_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.Ld}}]);