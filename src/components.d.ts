/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface DnnButton {
    /**
    * Optionally add a confirmation dialog before firing the action.
    */
    'confirm'?: boolean;
    /**
    * The text of the confirmation message;
    */
    'confirmMessage'?: string;
    /**
    * The text of the no button for confirmation.
    */
    'confirmNoText'?: string;
    /**
    * The text of the yes button for confirmation.
    */
    'confirmYesText'?: string;
    /**
    * Disables the button
    */
    'disabled': boolean;
    /**
    * Optionally reverses the button style.
    */
    'reversed': boolean;
    /**
    * Optionally sets the button size, small normal or large, defaults to normal
    */
    'size'?: 'small' | 'normal' | 'large';
    /**
    * Optional button style, can be either primary, secondary or tertiary and defaults to primary if not specified
    */
    'type': 'primary' | 'secondary' | 'tertiary';
  }
  interface DnnModal {
    /**
    * Pass false to remove the backdrop click auto-dismiss feature.
    */
    'backdropDismiss': boolean;
    /**
    * Optionally pass the aria-label text for the close button. Defaults to "Close modal" if not provided.
    */
    'closeText'?: string;
    /**
    * Hides the modal
    */
    'hide': () => Promise<void>;
    /**
    * Shows the modal
    */
    'show': () => Promise<void>;
    /**
    * Optionally you can pass false to not show the close button. If you decide to do so, you should either not also prevent dismissal by clicking the backdrop or provide your own dismissal logic in the modal content.
    */
    'showCloseButton'?: boolean;
  }
  interface DnnSearchbox {
    /**
    * Sets the field placeholder text.
    */
    'placeholder'?: string;
  }
}

declare global {


  interface HTMLDnnButtonElement extends Components.DnnButton, HTMLStencilElement {}
  const HTMLDnnButtonElement: {
    prototype: HTMLDnnButtonElement;
    new (): HTMLDnnButtonElement;
  };

  interface HTMLDnnModalElement extends Components.DnnModal, HTMLStencilElement {}
  const HTMLDnnModalElement: {
    prototype: HTMLDnnModalElement;
    new (): HTMLDnnModalElement;
  };

  interface HTMLDnnSearchboxElement extends Components.DnnSearchbox, HTMLStencilElement {}
  const HTMLDnnSearchboxElement: {
    prototype: HTMLDnnSearchboxElement;
    new (): HTMLDnnSearchboxElement;
  };
  interface HTMLElementTagNameMap {
    'dnn-button': HTMLDnnButtonElement;
    'dnn-modal': HTMLDnnModalElement;
    'dnn-searchbox': HTMLDnnSearchboxElement;
  }
}

declare namespace LocalJSX {
  interface DnnButton {
    /**
    * Optionally add a confirmation dialog before firing the action.
    */
    'confirm'?: boolean;
    /**
    * The text of the confirmation message;
    */
    'confirmMessage'?: string;
    /**
    * The text of the no button for confirmation.
    */
    'confirmNoText'?: string;
    /**
    * The text of the yes button for confirmation.
    */
    'confirmYesText'?: string;
    /**
    * Disables the button
    */
    'disabled'?: boolean;
    /**
    * Fires when confirm is true and the user cancels the action.
    */
    'onCanceled'?: (event: CustomEvent<any>) => void;
    /**
    * Fires when confirm is true and the user confirms the action.
    */
    'onConfirmed'?: (event: CustomEvent<any>) => void;
    /**
    * Optionally reverses the button style.
    */
    'reversed'?: boolean;
    /**
    * Optionally sets the button size, small normal or large, defaults to normal
    */
    'size'?: 'small' | 'normal' | 'large';
    /**
    * Optional button style, can be either primary, secondary or tertiary and defaults to primary if not specified
    */
    'type'?: 'primary' | 'secondary' | 'tertiary';
  }
  interface DnnModal {
    /**
    * Pass false to remove the backdrop click auto-dismiss feature.
    */
    'backdropDismiss'?: boolean;
    /**
    * Optionally pass the aria-label text for the close button. Defaults to "Close modal" if not provided.
    */
    'closeText'?: string;
    /**
    * Fires when the modal is dismissed.
    */
    'onDismissed'?: (event: CustomEvent<any>) => void;
    /**
    * Optionally you can pass false to not show the close button. If you decide to do so, you should either not also prevent dismissal by clicking the backdrop or provide your own dismissal logic in the modal content.
    */
    'showCloseButton'?: boolean;
  }
  interface DnnSearchbox {
    /**
    * Fires up each time the search query changes. The data passed is the new query.
    */
    'onQueryChanged'?: (event: CustomEvent<any>) => void;
    /**
    * Sets the field placeholder text.
    */
    'placeholder'?: string;
  }

  interface IntrinsicElements {
    'dnn-button': DnnButton;
    'dnn-modal': DnnModal;
    'dnn-searchbox': DnnSearchbox;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'dnn-button': LocalJSX.DnnButton & JSXBase.HTMLAttributes<HTMLDnnButtonElement>;
      'dnn-modal': LocalJSX.DnnModal & JSXBase.HTMLAttributes<HTMLDnnModalElement>;
      'dnn-searchbox': LocalJSX.DnnSearchbox & JSXBase.HTMLAttributes<HTMLDnnSearchboxElement>;
    }
  }
}


