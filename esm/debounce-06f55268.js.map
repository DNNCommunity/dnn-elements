{"file":"debounce-06f55268.js","mappings":"AAAA;;;;SAIgB,QAAQ,CAAC,eAAuB,GAAG;EAC/C,OAAO,UAAS,OAAY,EAAE,IAAY,EAAE,UAA8B;IAEtE,IAAI,cAAc,GAAG,UAAU,CAAC,KAAK,CAAC;IACtC,IAAI,KAAK,GAAG,IAAI,CAAC;IAEjB,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;MACtC,YAAY,CAAC,KAAK,CAAC,CAAC;MACpB,OAAO,IAAI,OAAO,CAAC,OAAO;QACtB,KAAK,GAAG,UAAU,CAAC;UACf,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SAC7C,EAAE,YAAY,CAAC,CAAC;OACpB,CAAC,CAAA;KAEL,CAAA;GAEJ,CAAA;AACL;;;;","names":[],"sources":["./src/utilities/debounce.ts"],"sourcesContent":["/**\r\n * Debounces a function call, see http://demo.nimius.net/debounce_throttle/ for explanation of debounce vs throttle.\r\n * @param debounceTime How many milliseconds to debounce for.\r\n */\r\nexport function Debounce(debounceTime: number = 500){\r\n    return function(_target: any, _key: string, descriptor: PropertyDescriptor){\r\n\r\n        let originalMethod = descriptor.value;\r\n        let timer = null;\r\n\r\n        descriptor.value = function(...args: any[]){\r\n            clearTimeout(timer);\r\n            return new Promise(resolve => {\r\n                timer = setTimeout(() => {\r\n                    resolve(originalMethod.apply(this, args));\r\n                }, debounceTime);\r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n}"],"version":3}