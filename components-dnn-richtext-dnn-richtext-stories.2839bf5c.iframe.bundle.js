"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[797],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var chunk_KKE3V3AL=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-KKE3V3AL.mjs"),actions=(...args)=>{let options=chunk_KKE3V3AL.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_KKE3V3AL.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_KKE3V3AL.aD)(namesObject[name],options)})),actionsObject};__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs")},"./src/components/dnn-richtext/dnn-richtext.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,Default:()=>Default,Minimal:()=>Minimal,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_richtext_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_richtext_stories={title:"Elements/Richtext",component:"dnn-richtext",tags:["autodocs"],parameters:{docs:{description:{component:"# dnn-richtext\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property  | Attribute | Description                                                                                    | Type                | Default     |\n| --------- | --------- | ---------------------------------------------------------------------------------------------- | ------------------- | ----------- |\n| `options` | --        | Optional configuration for Jodit, see https://xdsoft.net/jodit/docs/classes/config.Config.html | `DnnRichtextConfig` | `undefined` |\n| `value`   | `value`   | Sets the value of the content of the editor.                                                   | `string`            | `undefined` |\n\n\n## Events\n\n| Event         | Description                   | Type                  |\n| ------------- | ----------------------------- | --------------------- |\n| `valueChange` | Fires when the value changed. | `CustomEvent<string>` |\n| `valueInput`  | Fires during value input.     | `CustomEvent<string>` |\n\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n"}}},argTypes:{value:{control:"text"},options:{control:"object"}}},eventsFromNames=(0,dist.Nw)("onValueChange","onValueInput"),Template=args=>lit.dy`
    <dnn-richtext
        value=${args.value}
        .options=${args.options}
        @valueChange=${eventsFromNames.onValueChange}
        @valueInput=${eventsFromNames.onValueInput}
    />
    `,Default=Template.bind({});Default.args={value:'<h1>Hello World</h1>\n<div class="card">\n    <p>Some text</p>\n</div>\n'};const Basic=Template.bind({});Basic.args={...Default.args,options:{buttons:"bold,italic,underline,strikethrough,eraser,ul,ol,paragraph,superscript,subscript,spellcheck,cut,copy,paste,selectall,copyformat,hr,link"}};const Minimal=Template.bind({});Minimal.args={...Default.args,options:{buttons:"bold,italic,underline,"}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => html`\n    <dnn-richtext\n        value=${args.value}\n        .options=${args.options}\n        @valueChange=${eventsFromNames.onValueChange}\n        @valueInput=${eventsFromNames.onValueInput}\n    />\n    `",...Default.parameters?.docs?.source}}},Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"args => html`\n    <dnn-richtext\n        value=${args.value}\n        .options=${args.options}\n        @valueChange=${eventsFromNames.onValueChange}\n        @valueInput=${eventsFromNames.onValueInput}\n    />\n    `",...Basic.parameters?.docs?.source}}},Minimal.parameters={...Minimal.parameters,docs:{...Minimal.parameters?.docs,source:{originalSource:"args => html`\n    <dnn-richtext\n        value=${args.value}\n        .options=${args.options}\n        @valueChange=${eventsFromNames.onValueChange}\n        @valueInput=${eventsFromNames.onValueInput}\n    />\n    `",...Minimal.parameters?.docs?.source}}};const __namedExportsOrder=["Default","Basic","Minimal"]}}]);