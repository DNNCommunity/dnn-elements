/*! For license information please see components-dnn-color-input-dnn-color-input-stories.942d25bd.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[85],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),preview_errors=__webpack_require__("../../node_modules/@storybook/addon-actions/node_modules/@storybook/core-events/dist/errors/preview-errors.mjs"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new preview_errors.is({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id="object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.Z)():Date.now().toString(36)+Math.random().toString(36).substring(2),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler}var actions=(...args)=>{let options=config,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...config,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=action(namesObject[name],options)})),actionsObject}},"./src/components/dnn-color-input/dnn-color-input.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Color:()=>Color,ColorSystem:()=>ColorSystem,WithContrast:()=>WithContrast,WithLabelAndHelp:()=>WithLabelAndHelp,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_color_input_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_color_input_stories={title:"Elements/Color Input",component:"dnn-color-input",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-color-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Overview\n\nA custom input component that allows previewing and changing a color value.\n\n## Properties\n\n| Property           | Attribute            | Description                                                                                         | Type                                                                                                                   | Default                                                                                                                                                             |\n| ------------------ | -------------------- | --------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `color`            | `color`              | Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.          | `string`                                                                                                               | `"000088"`                                                                                                                                                          |\n| `contrastColor`    | `contrast-color`     | Sets the initial contrast color, must be a valid 8 character hexadecimal string without the # sign. | `string`                                                                                                               | `"FFFFFF"`                                                                                                                                                          |\n| `darkColor`        | `dark-color`         | Sets the initial dark color, must be a valid 8 character hexadecimal string without the # sign.     | `string`                                                                                                               | `"0000044"`                                                                                                                                                         |\n| `helpText`         | `help-text`          | Defines the help label displayed under the field.                                                   | `string`                                                                                                               | `undefined`                                                                                                                                                         |\n| `label`            | `label`              | The label for this input.                                                                           | `string`                                                                                                               | `undefined`                                                                                                                                                         |\n| `lightColor`       | `light-color`        | Sets the initial light color, must be a valid 8 character hexadecimal string without the # sign.    | `string`                                                                                                               | `"00000FF"`                                                                                                                                                         |\n| `localization`     | --                   | Can be used to customize the text language.                                                         | `{ contrast: string; preview: string; cancel: string; confirm: string; normal: string; light: string; dark: string; }` | `{     contrast: "Contrast",     preview: "Preview",     cancel: "Cancel",     confirm: "Confirm",     normal: "Normal",     light: "Light",     dark: "Dark",   }` |\n| `name`             | `name`               | The name for this input, if not provided a random name will be assigned.                            | `string`                                                                                                               | `undefined`                                                                                                                                                         |\n| `readonly`         | `readonly`           | Disables interacting with the component.                                                            | `boolean`                                                                                                              | `undefined`                                                                                                                                                         |\n| `useContrastColor` | `use-contrast-color` | If true, the picker will allow selecting a contast color too.                                       | `boolean`                                                                                                              | `undefined`                                                                                                                                                         |\n| `useDarkColor`     | `use-dark-color`     | If true, the picker will allow selecting a dark color too.                                          | `boolean`                                                                                                              | `undefined`                                                                                                                                                         |\n| `useLightColor`    | `use-light-color`    | If true, the picker will allow selecting a light color too.                                         | `boolean`                                                                                                              | `undefined`                                                                                                                                                         |\n\n\n## Events\n\n| Event         | Description                                                      | Type                        |\n| ------------- | ---------------------------------------------------------------- | --------------------------- |\n| `colorChange` | Fires when the color was changed and confirmed.                  | `CustomEvent<DnnColorInfo>` |\n| `colorInput`  | Fires live as the user is trying color changes inside the modal. | `CustomEvent<DnnColorInfo>` |\n\n\n## Slots\n\n| Slot       | Description                                           |\n| ---------- | ----------------------------------------------------- |\n| `"prefix"` | Can be used to inject content before the input field. |\n| `"suffix"` | Can be used to inject content after the input field.  |\n\n\n## CSS Custom Properties\n\n| Name                   | Description                                                          |\n| ---------------------- | -------------------------------------------------------------------- |\n| `--background`         | Defines the background color.                                        |\n| `--contast-text-align` | Allows customizing the text alignment of the contast indicator text. |\n| `--control-radius`     | Defines the radius for the control corners.                          |\n| `--focus-color`        | Defines the color when the component is focused.                     |\n| `--foreground`         | Defines the foreground color.                                        |\n\n\n## Dependencies\n\n### Depends on\n\n- [dnn-modal](../dnn-modal)\n- [dnn-tabs](../dnn-tabs)\n- [dnn-tab](../dnn-tab)\n- [dnn-color-picker](../dnn-color-picker)\n- [dnn-button](../dnn-button)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-color-input --\x3e dnn-modal\n  dnn-color-input --\x3e dnn-tabs\n  dnn-color-input --\x3e dnn-tab\n  dnn-color-input --\x3e dnn-color-picker\n  dnn-color-input --\x3e dnn-button\n  dnn-button --\x3e dnn-modal\n  dnn-button --\x3e dnn-button\n  style dnn-color-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{color:{control:"string"},"contrast-color":{control:"string"},"light-color":{control:"string"},"dark-color":{control:"string"},"help-text":{control:"text"},label:{control:"text"},name:{control:"text"},readonly:{control:"boolean"},localization:{control:"object"},"use-contrast-color":{control:"boolean"},"use-light-color":{control:"boolean"},"use-dark-color":{control:"boolean"},prefix:{control:"text"},suffix:{control:"text"}}},eventsFromNames=(0,dist.Nw)("colorChange","colorInput");const Template=args=>lit.dy`
        <dnn-color-input
          color=${(0,if_defined.o)(args.color)}
          contrast-color=${(0,if_defined.o)(args["contrast-color"])}
          light-color=${(0,if_defined.o)(args["light-color"])}
          dark-color=${(0,if_defined.o)(args["dark-color"])}
          ?use-contrast-color=${(0,if_defined.o)(args["use-contrast-color"])}
          ?use-light-color=${(0,if_defined.o)(args["use-light-color"])}
          ?use-dark-color=${(0,if_defined.o)(args["use-dark-color"])}
          help-text=${(0,if_defined.o)(args["help-text"])}
          label=${(0,if_defined.o)(args.label)}
          name=${(0,if_defined.o)(args.name)}
          ?readonly=${(0,if_defined.o)(args.readonly)}
          @colorChange=${e=>eventsFromNames.colorChange(e)}
          @colorInput=${e=>eventsFromNames.colorInput(e)}
        >
        ${function getSlots(args){const slots=[];return args.prefix&&slots.push(lit.dy`<div slot="prefix">${args.prefix}</div>`),args.suffix&&slots.push(lit.dy`<div slot="suffix">${args.suffix}</div>`),slots}(args)}
        </dnn-input>
    `,Color=Template.bind({});Color.args={"allow-show-password":!1,autocomplete:"off",disabled:!1,"disable-validity-reporting":!1,multiple:!1,readonly:!1,required:!1,color:"000088"};const WithLabelAndHelp=Template.bind({});WithLabelAndHelp.args={...Color.args,"help-text":"Choose a color",label:"Color"};const WithContrast=Template.bind({});WithContrast.args={...Color.args,"contrast-color":"FFFFFF",color:"0000AA","use-contrast-color":!0};const ColorSystem=Template.bind({});ColorSystem.args={...WithContrast.args,"light-color":"0000FF","dark-color":"000055","use-light-color":!0,"use-dark-color":!0},Color.parameters={...Color.parameters,docs:{...Color.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-color-input\n          color=${ifDefined(args.color)}\n          contrast-color=${ifDefined(args["contrast-color"])}\n          light-color=${ifDefined(args["light-color"])}\n          dark-color=${ifDefined(args["dark-color"])}\n          ?use-contrast-color=${ifDefined(args["use-contrast-color"])}\n          ?use-light-color=${ifDefined(args["use-light-color"])}\n          ?use-dark-color=${ifDefined(args["use-dark-color"])}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          name=${ifDefined(args.name)}\n          ?readonly=${ifDefined(args.readonly)}\n          @colorChange=${e => eventsFromNames.colorChange(e)}\n          @colorInput=${e => eventsFromNames.colorInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Color.parameters?.docs?.source}}},WithLabelAndHelp.parameters={...WithLabelAndHelp.parameters,docs:{...WithLabelAndHelp.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-color-input\n          color=${ifDefined(args.color)}\n          contrast-color=${ifDefined(args["contrast-color"])}\n          light-color=${ifDefined(args["light-color"])}\n          dark-color=${ifDefined(args["dark-color"])}\n          ?use-contrast-color=${ifDefined(args["use-contrast-color"])}\n          ?use-light-color=${ifDefined(args["use-light-color"])}\n          ?use-dark-color=${ifDefined(args["use-dark-color"])}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          name=${ifDefined(args.name)}\n          ?readonly=${ifDefined(args.readonly)}\n          @colorChange=${e => eventsFromNames.colorChange(e)}\n          @colorInput=${e => eventsFromNames.colorInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...WithLabelAndHelp.parameters?.docs?.source}}},WithContrast.parameters={...WithContrast.parameters,docs:{...WithContrast.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-color-input\n          color=${ifDefined(args.color)}\n          contrast-color=${ifDefined(args["contrast-color"])}\n          light-color=${ifDefined(args["light-color"])}\n          dark-color=${ifDefined(args["dark-color"])}\n          ?use-contrast-color=${ifDefined(args["use-contrast-color"])}\n          ?use-light-color=${ifDefined(args["use-light-color"])}\n          ?use-dark-color=${ifDefined(args["use-dark-color"])}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          name=${ifDefined(args.name)}\n          ?readonly=${ifDefined(args.readonly)}\n          @colorChange=${e => eventsFromNames.colorChange(e)}\n          @colorInput=${e => eventsFromNames.colorInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...WithContrast.parameters?.docs?.source}}},ColorSystem.parameters={...ColorSystem.parameters,docs:{...ColorSystem.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-color-input\n          color=${ifDefined(args.color)}\n          contrast-color=${ifDefined(args["contrast-color"])}\n          light-color=${ifDefined(args["light-color"])}\n          dark-color=${ifDefined(args["dark-color"])}\n          ?use-contrast-color=${ifDefined(args["use-contrast-color"])}\n          ?use-light-color=${ifDefined(args["use-light-color"])}\n          ?use-dark-color=${ifDefined(args["use-dark-color"])}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          name=${ifDefined(args.name)}\n          ?readonly=${ifDefined(args.readonly)}\n          @colorChange=${e => eventsFromNames.colorChange(e)}\n          @colorInput=${e => eventsFromNames.colorInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...ColorSystem.parameters?.docs?.source}}};const __namedExportsOrder=["Color","WithLabelAndHelp","WithContrast","ColorSystem"]},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>o});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js"),o=o=>null!=o?o:_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.Ld}}]);
//# sourceMappingURL=components-dnn-color-input-dnn-color-input-stories.942d25bd.iframe.bundle.js.map