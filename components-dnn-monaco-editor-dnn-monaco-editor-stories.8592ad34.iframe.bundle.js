"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[159],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o1:()=>actions});var v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),preview_errors=__webpack_require__("../../node_modules/@storybook/core-events/dist/errors/preview-errors.mjs"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new preview_errors._U({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id="object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler}var actions=(...args)=>{let options=config,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...config,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=action(namesObject[name],options)})),actionsObject}},"./src/components/dnn-monaco-editor/dnn-monaco-editor.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{HTML:()=>HTML,Typescript:()=>Typescript,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_monaco_editor_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_monaco_editor_stories={title:"Elements/Monaco Editor",component:"dnn-monaco-editor",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-monaco-editor\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property   | Attribute  | Description                               | Type                                                                                                                                                                                                                                                                                                                                                                                                                                    | Default     |\n| ---------- | ---------- | ----------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `language` | `language` | Defines the language for the editor.      | `"html" \\| "ruby" \\| "plaintext" \\| "bat" \\| "coffeescript" \\| "c" \\| "cpp" \\| "csharp" \\| "dockerfile" \\| "fsharp" \\| "go" \\| "handlebars" \\| "ini" \\| "pug" \\| "java" \\| "lua" \\| "markdown" \\| "msdax" \\| "objective-c" \\| "postiats" \\| "php" \\| "powershell" \\| "python" \\| "r" \\| "razor" \\| "swift" \\| "sql" \\| "vb" \\| "xml" \\| "less" \\| "scss" \\| "css" \\| "yaml" \\| "sol" \\| "sb" \\| "json" \\| "typescript" \\| "javascript"` | `"html"`    |\n| `name`     | `name`     | The name of the control to use for forms. | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                | `undefined` |\n| `value`    | `value`    | Sets the code contained in the editor     | `string`                                                                                                                                                                                                                                                                                                                                                                                                                                | `""`        |\n\n\n## Events\n\n| Event            | Description                                            | Type                  |\n| ---------------- | ------------------------------------------------------ | --------------------- |\n| `contentChanged` | Emits the new value of the content when it is changed. | `CustomEvent<string>` |\n\n\n## CSS Custom Properties\n\n| Name                     | Description                           |\n| ------------------------ | ------------------------------------- |\n| `--monaco-editor-height` | height of the editor, default is 50vh |\n| `--monaco-editor-width`  | width of the editor, default is 100%  |\n\n\n## Dependencies\n\n### Used by\n\n - [dnn-example-form](../examples/dnn-example-form)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-example-form --\x3e dnn-monaco-editor\n  style dnn-monaco-editor fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{language:{options:["bat","c","coffeescript","cpp","csharp","css","dockerfile","fsharp","go","handlebars","html","ini","java","javascript","json","less","lua","markdown","msdax","objective-c","php","plaintext","postiats","powershell","pug","python","r","razor","ruby","sb","scss","sol","sql","swift","typescript","vb","xml","yaml"],control:{type:"select"}},value:{control:"text"}}},eventsFromNames=(0,dist.o1)("onContentChanged"),Template=args=>lit.qy`
    <dnn-monaco-editor
        language=${args.language}
        value=${args.value}
        @contentChanged=${eventsFromNames.onContentChanged}
    />
    `,HTML=Template.bind({});HTML.args={language:"html",value:'<h1>Hello World</h1>\n<div class="card">\n    <p>Some text</p>\n</div>\n'};const Typescript=Template.bind({});Typescript.args={language:"typescript",value:'/** Defines basic info about a person. */\ninterface Person {\n\n    /** The person\'s first name. */\n    firstName: string;\n\n    /** The person\'s last name. */\n    lastName: string;\n}\n\n/** Greets a person. */\nconst greeter = (person: Person) =>\n{\n    return "Hello, " + person.firstName + " " + person.lastName;\n}\n\nexport default greeter;\n'},HTML.parameters={...HTML.parameters,docs:{...HTML.parameters?.docs,source:{originalSource:"args => html`\n    <dnn-monaco-editor\n        language=${args.language}\n        value=${args.value}\n        @contentChanged=${eventsFromNames.onContentChanged}\n    />\n    `",...HTML.parameters?.docs?.source}}},Typescript.parameters={...Typescript.parameters,docs:{...Typescript.parameters?.docs,source:{originalSource:"args => html`\n    <dnn-monaco-editor\n        language=${args.language}\n        value=${args.value}\n        @contentChanged=${eventsFromNames.onContentChanged}\n    />\n    `",...Typescript.parameters?.docs?.source}}};const __namedExportsOrder=["HTML","Typescript"]}}]);
//# sourceMappingURL=components-dnn-monaco-editor-dnn-monaco-editor-stories.8592ad34.iframe.bundle.js.map