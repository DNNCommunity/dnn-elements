{"version":3,"sources":["src/utilities/debounce.ts"],"names":["Debounce","debounceTime","_target","_key","descriptor","originalMethod","value","timer","args","clearTimeout","Promise","resolve","setTimeout","apply","this"],"mappings":"SAIgBA,EAASC,EAAuB,KAC5C,OAAO,SAASC,EAAcC,EAAcC,GAExC,IAAIC,EAAiBD,EAAWE,MAChC,IAAIC,EAAQ,KAEZH,EAAWE,MAAQ,YAAYE,GAC3BC,aAAaF,GACb,OAAO,IAAIG,SAAQC,IACfJ,EAAQK,YAAW,KACfD,EAAQN,EAAeQ,MAAMC,KAAMN,MACpCP","sourcesContent":["/**\r\n * Debounces a function call, see http://demo.nimius.net/debounce_throttle/ for explanation of debounce vs throttle.\r\n * @param debounceTime How many milliseconds to debounce for.\r\n */\r\nexport function Debounce(debounceTime: number = 500){\r\n    return function(_target: any, _key: string, descriptor: PropertyDescriptor){\r\n\r\n        let originalMethod = descriptor.value;\r\n        let timer = null;\r\n\r\n        descriptor.value = function(...args: any[]){\r\n            clearTimeout(timer);\r\n            return new Promise(resolve => {\r\n                timer = setTimeout(() => {\r\n                    resolve(originalMethod.apply(this, args));\r\n                }, debounceTime);\r\n            })\r\n\r\n        }\r\n        \r\n    }\r\n}"]}