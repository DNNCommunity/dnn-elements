/*! For license information please see components-dnn-input-dnn-input-stories.b4571761.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[79],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o1:()=>actions});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id="object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}var actions=(...args)=>{let options=config,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...config,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=action(namesObject[name],options)})),actionsObject}},"./src/components/dnn-input/dnn-input.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Amount:()=>Amount,Disabled:()=>Disabled,Email:()=>Email,Number:()=>dnn_input_stories_Number,Password:()=>Password,ReadOnly:()=>ReadOnly,Required:()=>Required,Text:()=>Text,UsPhoneNumber:()=>UsPhoneNumber,WithLabelAndHelp:()=>WithLabelAndHelp,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_input_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_input_stories={title:"Elements/Input",component:"dnn-input",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-input\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Overview\n\nA custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.\n\n## Properties\n\n| Property                   | Attribute                    | Description                                                                                                                                                                                       | Type                                                                                                                | Default     |\n| -------------------------- | ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------- | ----------- |\n| `allowShowPassword`        | `allow-show-password`        | If true, enables users to switch between a password and a text field (to view their password).                                                                                                    | `boolean`                                                                                                           | `undefined` |\n| `autocomplete`             | `autocomplete`               | Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete.                                                         | `string`                                                                                                            | `"off"`     |\n| `disableValidityReporting` | `disable-validity-reporting` | <span style="color:red">**[DEPRECATED]**</span> This control has it\'s own validation reporting, will be removed in v0.25.0<br/><br/>                                                              | `boolean`                                                                                                           | `undefined` |\n| `disabled`                 | `disabled`                   | Defines whether the field is disabled.                                                                                                                                                            | `boolean`                                                                                                           | `undefined` |\n| `helpText`                 | `help-text`                  | Defines the help label displayed under the field.                                                                                                                                                 | `string`                                                                                                            | `undefined` |\n| `label`                    | `label`                      | The label for this input.                                                                                                                                                                         | `string`                                                                                                            | `undefined` |\n| `max`                      | `max`                        | Defines the maximum allowed value.                                                                                                                                                                | `number \\| string`                                                                                                  | `undefined` |\n| `maxlength`                | `maxlength`                  | Defines the maximum amount of charaters.                                                                                                                                                          | `number`                                                                                                            | `undefined` |\n| `min`                      | `min`                        | Defines the minimum allowed value.                                                                                                                                                                | `number \\| string`                                                                                                  | `undefined` |\n| `minlength`                | `minlength`                  | Defines the minimum amount of charaters.                                                                                                                                                          | `number`                                                                                                            | `undefined` |\n| `multiple`                 | `multiple`                   | If true, allows multiple emails to be entered separated by commas.                                                                                                                                | `boolean`                                                                                                           | `undefined` |\n| `name`                     | `name`                       | The name for this input when used in forms.                                                                                                                                                       | `string`                                                                                                            | `undefined` |\n| `pattern`                  | `pattern`                    | Valid for text, search, url, tel, email, and password, the pattern attribute defines a regular expression that the input\'s value must match in order for the value to pass constraint validation. | `string`                                                                                                            | `undefined` |\n| `readonly`                 | `readonly`                   | Defines wheter the defined value is readonly.                                                                                                                                                     | `boolean`                                                                                                           | `undefined` |\n| `required`                 | `required`                   | Defines whether the field requires having a value.                                                                                                                                                | `boolean`                                                                                                           | `undefined` |\n| `step`                     | `step`                       | Defines the possible steps for numbers and dates/times. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#step                                                             | `number \\| string`                                                                                                  | `undefined` |\n| `type`                     | `type`                       | The input type, supports most of html standard input type, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types.                                                       | `"date" \\| "datetime-local" \\| "email" \\| "number" \\| "password" \\| "search" \\| "tel" \\| "text" \\| "time" \\| "url"` | `"text"`    |\n| `value`                    | `value`                      | The value of the input.                                                                                                                                                                           | `number \\| string \\| string[]`                                                                                      | `undefined` |\n\n\n## Events\n\n| Event         | Description                                                    | Type                                        |\n| ------------- | -------------------------------------------------------------- | ------------------------------------------- |\n| `valueChange` | Fires when the value has changed and the user exits the input. | `CustomEvent<number \\| string \\| string[]>` |\n| `valueInput`  | Fires when the using is inputing data (on keystrokes).         | `CustomEvent<number \\| string \\| string[]>` |\n\n\n## Methods\n\n### `checkValidity() => Promise<ValidityState>`\n\nReports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n\n#### Returns\n\nType: `Promise<ValidityState>`\n\n\n\n### `setCustomValidity(message: string) => Promise<void>`\n\nCan be used to set a custom validity message.\n\n#### Parameters\n\n| Name      | Type     | Description |\n| --------- | -------- | ----------- |\n| `message` | `string` |             |\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## Slots\n\n| Slot       | Description                                           |\n| ---------- | ----------------------------------------------------- |\n| `"prefix"` | Can be used to inject content before the input field. |\n| `"suffix"` | Can be used to inject content after the input field.  |\n\n\n## CSS Custom Properties\n\n| Name                 | Description                                              |\n| -------------------- | -------------------------------------------------------- |\n| `--background`       | Defines the background color.                            |\n| `--control-radius`   | Defines the radius for the control corners.              |\n| `--danger-color`     | Defines the danger color used for invalid data.          |\n| `--focus-color`      | Defines the color when the component is focused.         |\n| `--foreground`       | Defines the foreground color.                            |\n| `--input-text-align` | Allows customizing the text alignment of the input text. |\n\n\n## Dependencies\n\n### Used by\n\n - [dnn-example-form](../examples/dnn-example-form)\n\n### Depends on\n\n- [dnn-fieldset](../dnn-fieldset)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-input --\x3e dnn-fieldset\n  dnn-example-form --\x3e dnn-input\n  style dnn-input fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{"allow-show-password":{control:"boolean"},autocomplete:{type:"string"},"disable-validity-reporting":{control:"boolean"},disabled:{control:"boolean"},"help-text":{control:"text"},label:{control:"text"},min:{control:"number"},minlength:{control:"number"},max:{control:"number"},maxlength:{control:"number"},multiple:{control:"boolean"},name:{control:"text"},pattern:{control:"text"},readonly:{control:"boolean"},required:{control:"boolean"},step:{control:"number"},type:{options:["date","datetime-local","email","number","password","tel","text","time","url","search"],control:{type:"select"}},value:{control:"text"},prefix:{control:"text"},suffix:{control:"text"}}},eventsFromNames=(0,dist.o1)("valueChange","valueInput");const Template=args=>lit.qy`
        <dnn-input
          autocomplete=${"off"==args.autocomplete?lit.s6:args.autocomplete}
          ?disable-validity-reporting=${args["disable-validity-reporting"]}
          ?disabled=${args.disabled}
          help-text=${(0,if_defined.J)(args["help-text"])}
          label=${(0,if_defined.J)(args.label)}
          min=${(0,if_defined.J)(args.min)}
          minlength=${(0,if_defined.J)(args.minlength)}
          max=${(0,if_defined.J)(args.max)}
          maxlength=${(0,if_defined.J)(args.maxlength)}
          name=${(0,if_defined.J)(args.name)}
          ?multiple=${(0,if_defined.J)(args.multiple)}
          pattern=${(0,if_defined.J)(args.pattern)}
          ?readonly=${(0,if_defined.J)(args.readonly)}
          ?required=${(0,if_defined.J)(args.required)}
          step=${(0,if_defined.J)(args.step)}
          type=${(0,if_defined.J)(args.type)}
          value=${(0,if_defined.J)(args.value)}
          ?allow-show-password=${args["allow-show-password"]}
          @valueChange=${e=>eventsFromNames.valueChange(e)}
          @valueInput=${e=>eventsFromNames.valueInput(e)}
        >
        ${function getSlots(args){const slots=[];return args.prefix&&slots.push(lit.qy`<div slot="prefix">${args.prefix}</div>`),args.suffix&&slots.push(lit.qy`<div slot="suffix">${args.suffix}</div>`),slots}(args)}
        </dnn-input>
    `,Text=Template.bind({});Text.args={"allow-show-password":!1,autocomplete:"off",disabled:!1,"disable-validity-reporting":!1,multiple:!1,readonly:!1,required:!1};const Password=Template.bind({});Password.args={...Text.args,"allow-show-password":!0,type:"password",minlength:8,maxlength:16};const Disabled=Template.bind({});Disabled.args={disabled:!0};const WithLabelAndHelp=Template.bind({});WithLabelAndHelp.args={label:"Name","help-text":"What is your name?"};const dnn_input_stories_Number=Template.bind({});dnn_input_stories_Number.args={type:"number",min:0,max:10,step:.1};const Email=Template.bind({});Email.args={label:"Email","help-text":"What is your email?",type:"email",multiple:!0};const UsPhoneNumber=Template.bind({});UsPhoneNumber.args={type:"tel",pattern:"[0-9]{3}-[0-9]{3}-[0-9]{4}",label:"Telephone","help-text":"Ex: 123-456-7890"};const ReadOnly=Template.bind({});ReadOnly.args={label:"Read Only","help-text":"Can't touch this!",readonly:!0,value:"Read Only"};const Required=Template.bind({});Required.args={label:"Required","help-text":"You must enter a value!",required:!0};const Amount=Template.bind({});Amount.args={label:"Amount","help-text":"How much does it cost?",type:"number",min:0,max:1e6,step:.01,prefix:"$"};const __namedExportsOrder=["Text","Password","Disabled","WithLabelAndHelp","Number","Email","UsPhoneNumber","ReadOnly","Required","Amount"];Text.parameters={...Text.parameters,docs:{...Text.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Text.parameters?.docs?.source}}},Password.parameters={...Password.parameters,docs:{...Password.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Password.parameters?.docs?.source}}},Disabled.parameters={...Disabled.parameters,docs:{...Disabled.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Disabled.parameters?.docs?.source}}},WithLabelAndHelp.parameters={...WithLabelAndHelp.parameters,docs:{...WithLabelAndHelp.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...WithLabelAndHelp.parameters?.docs?.source}}},dnn_input_stories_Number.parameters={...dnn_input_stories_Number.parameters,docs:{...dnn_input_stories_Number.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...dnn_input_stories_Number.parameters?.docs?.source}}},Email.parameters={...Email.parameters,docs:{...Email.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Email.parameters?.docs?.source}}},UsPhoneNumber.parameters={...UsPhoneNumber.parameters,docs:{...UsPhoneNumber.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...UsPhoneNumber.parameters?.docs?.source}}},ReadOnly.parameters={...ReadOnly.parameters,docs:{...ReadOnly.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...ReadOnly.parameters?.docs?.source}}},Required.parameters={...Required.parameters,docs:{...Required.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Required.parameters?.docs?.source}}},Amount.parameters={...Amount.parameters,docs:{...Amount.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-input\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disable-validity-reporting=${args["disable-validity-reporting"]}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          min=${ifDefined(args.min)}\n          minlength=${ifDefined(args.minlength)}\n          max=${ifDefined(args.max)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?multiple=${ifDefined(args.multiple)}\n          pattern=${ifDefined(args.pattern)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          step=${ifDefined(args.step)}\n          type=${ifDefined(args.type)}\n          value=${ifDefined(args.value)}\n          ?allow-show-password=${args["allow-show-password"]}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        ${getSlots(args)}\n        </dnn-input>\n    `',...Amount.parameters?.docs?.source}}}},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>to});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js");const to=t=>t??_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.s6}}]);
//# sourceMappingURL=components-dnn-input-dnn-input-stories.b4571761.iframe.bundle.js.map