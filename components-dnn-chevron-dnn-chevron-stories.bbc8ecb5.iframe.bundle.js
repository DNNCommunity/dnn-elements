/*! For license information please see components-dnn-chevron-dnn-chevron-stories.bbc8ecb5.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[892],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Nw:()=>actions});var chunk_AY7I2SME=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-AY7I2SME.mjs"),actions=(...args)=>{let options=chunk_AY7I2SME.vc,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...chunk_AY7I2SME.vc,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=(0,chunk_AY7I2SME.aD)(namesObject[name],options)})),actionsObject};__webpack_require__("../../node_modules/@storybook/addon-actions/dist/chunk-VWCVBQ22.mjs")},"./src/components/dnn-chevron/dnn-chevron.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Chevron:()=>Chevron,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_chevron_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_chevron_stories={title:"Elements/Chevron",component:"dnn-chevron",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-chevron\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Properties\n\n| Property       | Attribute       | Description                      | Type      | Default      |\n| -------------- | --------------- | -------------------------------- | --------- | ------------ |\n| `collapseText` | `collapse-text` | Collapse text for screen readers | `string`  | `"collapse"` |\n| `expandText`   | `expand-text`   | Expand text for screen readers   | `string`  | `"expand"`   |\n| `expanded`     | `expanded`      | Is the chevron expanded          | `boolean` | `false`      |\n\n\n## Events\n\n| Event     | Description                               | Type               |\n| --------- | ----------------------------------------- | ------------------ |\n| `changed` | Fires up when the expanded status changes | `CustomEvent<any>` |\n\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{expandText:{control:"text"},collapseText:{control:"text"},expanded:{control:"boolean"}}},Chevron=((0,dist.Nw)("changed"),(args=>lit.dy`
        <dnn-chevron
            expand-text=${(0,if_defined.o)(args.expandText)}
            collapse-text=${(0,if_defined.o)(args.collapseText)}
            ?expanded=${(0,if_defined.o)(args.expanded)}>
        </dnn-chevron>
    `).bind({}));Chevron.args={expandText:"expand",collapseText:"collapse",expanded:!1},Chevron.parameters={...Chevron.parameters,docs:{...Chevron.parameters?.docs,source:{originalSource:"args => html`\n        <dnn-chevron\n            expand-text=${ifDefined(args.expandText)}\n            collapse-text=${ifDefined(args.collapseText)}\n            ?expanded=${ifDefined(args.expanded)}>\n        </dnn-chevron>\n    `",...Chevron.parameters?.docs?.source}}};const __namedExportsOrder=["Chevron"]},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>l});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js"),l=l=>null!=l?l:_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.Ld}}]);