/*! For license information please see components-dnn-textarea-dnn-textarea-stories.469ba03e.iframe.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunk_dnncommunity_dnn_elements=self.webpackChunk_dnncommunity_dnn_elements||[]).push([[5015],{"../../node_modules/@storybook/addon-actions/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o1:()=>actions});var external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("storybook/internal/preview-api"),external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_=__webpack_require__("storybook/internal/preview-errors"),external_STORYBOOK_MODULE_GLOBAL_=__webpack_require__("@storybook/global"),v4=__webpack_require__("../../node_modules/uuid/dist/esm-browser/v4.js"),ADDON_ID="storybook/actions",EVENT_ID=`${ADDON_ID}/action-event`,config={depth:10,clearOnStoryChange:!0,limit:50},findProto=(obj,callback)=>{let proto=Object.getPrototypeOf(obj);return!proto||callback(proto)?proto:findProto(proto,callback)},serializeArg=a=>{if("object"==typeof(e=a)&&e&&findProto(e,(proto=>/^Synthetic(?:Base)?Event$/.test(proto.constructor.name)))&&"function"==typeof e.persist){let e=Object.create(a.constructor.prototype,Object.getOwnPropertyDescriptors(a));e.persist();let viewDescriptor=Object.getOwnPropertyDescriptor(e,"view"),view=viewDescriptor?.value;return"object"==typeof view&&"Window"===view?.constructor.name&&Object.defineProperty(e,"view",{...viewDescriptor,value:Object.create(view.constructor.prototype)}),e}var e;return a};function action(name,options={}){let actionOptions={...config,...options},handler=function(...args){if(options.implicit){let storyRenderer=("__STORYBOOK_PREVIEW__"in external_STORYBOOK_MODULE_GLOBAL_.global?external_STORYBOOK_MODULE_GLOBAL_.global.__STORYBOOK_PREVIEW__:void 0)?.storyRenders.find((render=>"playing"===render.phase||"rendering"===render.phase));if(storyRenderer){let deprecated=!window?.FEATURES?.disallowImplicitActionsInRenderV8,error=new external_STORYBOOK_MODULE_CORE_EVENTS_PREVIEW_ERRORS_.ImplicitActionsDuringRendering({phase:storyRenderer.phase,name,deprecated});if(!deprecated)throw error;console.warn(error)}}let channel=external_STORYBOOK_MODULE_PREVIEW_API_.addons.getChannel(),id="object"==typeof crypto&&"function"==typeof crypto.getRandomValues?(0,v4.A)():Date.now().toString(36)+Math.random().toString(36).substring(2),serializedArgs=args.map(serializeArg),normalizedArgs=args.length>1?serializedArgs:serializedArgs[0],actionDisplayToEmit={id,count:0,data:{name,args:normalizedArgs},options:{...actionOptions,maxDepth:5+(actionOptions.depth||3),allowFunction:actionOptions.allowFunction||!1}};channel.emit(EVENT_ID,actionDisplayToEmit)};return handler.isAction=!0,handler.implicit=options.implicit,handler}var actions=(...args)=>{let options=config,names=args;1===names.length&&Array.isArray(names[0])&&([names]=names),1!==names.length&&"string"!=typeof names[names.length-1]&&(options={...config,...names.pop()});let namesObject=names[0];(1!==names.length||"string"==typeof namesObject)&&(namesObject={},names.forEach((name=>{namesObject[name]=name})));let actionsObject={};return Object.keys(namesObject).forEach((name=>{actionsObject[name]=action(namesObject[name],options)})),actionsObject}},"./src/components/dnn-textarea/dnn-textarea.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Text:()=>Text,__namedExportsOrder:()=>__namedExportsOrder,default:()=>dnn_textarea_stories});var lit=__webpack_require__("../../node_modules/lit/index.js"),if_defined=__webpack_require__("../../node_modules/lit-html/directives/if-defined.js"),dist=__webpack_require__("../../node_modules/@storybook/addon-actions/dist/index.mjs");const dnn_textarea_stories={title:"Elements/Textarea",component:"dnn-textarea",tags:["autodocs"],parameters:{docs:{description:{component:'# dnn-textarea\n\n\n\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Overview\n\nA custom textarea component.\n\n## Properties\n\n| Property       | Attribute      | Description                                                                                                                               | Type                                                                    | Default     |\n| -------------- | -------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------- | ----------- |\n| `autocomplete` | `autocomplete` | Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete. | `string`                                                                | `"off"`     |\n| `disabled`     | `disabled`     | Defines whether the field is disabled.                                                                                                    | `boolean`                                                               | `undefined` |\n| `helpText`     | `help-text`    | Defines the help label displayed under the field.                                                                                         | `string`                                                                | `undefined` |\n| `label`        | `label`        | The label for this input.                                                                                                                 | `string`                                                                | `undefined` |\n| `maxlength`    | `maxlength`    | Defines the maximum amount of charaters.                                                                                                  | `number`                                                                | `undefined` |\n| `minlength`    | `minlength`    | Defines the minimum amount of charaters.                                                                                                  | `number`                                                                | `undefined` |\n| `name`         | `name`         | The name for this input when used in forms.                                                                                               | `string`                                                                | `undefined` |\n| `readonly`     | `readonly`     | Defines wheter the defined value is readonly.                                                                                             | `boolean`                                                               | `undefined` |\n| `required`     | `required`     | Defines whether the field requires having a value.                                                                                        | `boolean`                                                               | `undefined` |\n| `resizable`    | `resizable`    | Can be set to change how the user can resize the field.                                                                                   | `"block" \\| "both" \\| "horizontal" \\| "inline" \\| "none" \\| "vertical"` | `"block"`   |\n| `rows`         | `rows`         | Defines how many rows (lines of text) to initially show.                                                                                  | `number`                                                                | `3`         |\n| `value`        | `value`        | Sets the value of the textarea.                                                                                                           | `string`                                                                | `undefined` |\n\n\n## Events\n\n| Event         | Description                                                    | Type                  |\n| ------------- | -------------------------------------------------------------- | --------------------- |\n| `valueChange` | Fires when the value has changed and the user exits the input. | `CustomEvent<string>` |\n| `valueInput`  | Fires when the using is inputing data (on keystrokes).         | `CustomEvent<string>` |\n\n\n## Methods\n\n### `checkValidity() => Promise<ValidityState>`\n\nReports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState\n\n#### Returns\n\nType: `Promise<ValidityState>`\n\n\n\n### `setCustomValidity(message: string) => Promise<void>`\n\nCan be used to set a custom validity message.\n\n#### Parameters\n\n| Name      | Type     | Description |\n| --------- | -------- | ----------- |\n| `message` | `string` |             |\n\n#### Returns\n\nType: `Promise<void>`\n\n\n\n\n## CSS Custom Properties\n\n| Name               | Description                                      |\n| ------------------ | ------------------------------------------------ |\n| `--background`     | Defines the background color.                    |\n| `--control-radius` | Defines the radius for the control corners.      |\n| `--danger-color`   | Defines the danger color used for invalid data.  |\n| `--focus-color`    | Defines the color when the component is focused. |\n| `--foreground`     | Defines the foreground color.                    |\n\n\n## Dependencies\n\n### Used by\n\n - [dnn-example-form](../examples/dnn-example-form)\n\n### Depends on\n\n- [dnn-fieldset](../dnn-fieldset)\n\n### Graph\n```mermaid\ngraph TD;\n  dnn-textarea --\x3e dnn-fieldset\n  dnn-example-form --\x3e dnn-textarea\n  style dnn-textarea fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n*Built with [StencilJS](https://stenciljs.com/)*\n'}}},argTypes:{autocomplete:{type:"string"},disabled:{control:"boolean"},"help-text":{control:"text"},label:{control:"text"},minlength:{control:"number"},maxlength:{control:"number"},name:{control:"text"},readonly:{control:"boolean"},required:{control:"boolean"},value:{control:"text"}}},eventsFromNames=(0,dist.o1)("valueChange","valueInput"),Text=(args=>lit.qy`
        <dnn-textarea
          autocomplete=${"off"==args.autocomplete?lit.s6:args.autocomplete}
          ?disabled=${args.disabled}
          help-text=${(0,if_defined.J)(args["help-text"])}
          label=${(0,if_defined.J)(args.label)}
          minlength=${(0,if_defined.J)(args.minlength)}
          maxlength=${(0,if_defined.J)(args.maxlength)}
          name=${(0,if_defined.J)(args.name)}
          ?readonly=${(0,if_defined.J)(args.readonly)}
          ?required=${(0,if_defined.J)(args.required)}
          value=${(0,if_defined.J)(args.value)}
          @valueChange=${e=>eventsFromNames.valueChange(e)}
          @valueInput=${e=>eventsFromNames.valueInput(e)}
        >
        </dnn-input>
    `).bind({});Text.args={autocomplete:"off",disabled:!1,readonly:!1,required:!1};const __namedExportsOrder=["Text"];Text.parameters={...Text.parameters,docs:{...Text.parameters?.docs,source:{originalSource:'args => html`\n        <dnn-textarea\n          autocomplete=${args.autocomplete == "off" ? nothing : args.autocomplete}\n          ?disabled=${args.disabled}\n          help-text=${ifDefined(args["help-text"])}\n          label=${ifDefined(args.label)}\n          minlength=${ifDefined(args.minlength)}\n          maxlength=${ifDefined(args.maxlength)}\n          name=${ifDefined(args.name)}\n          ?readonly=${ifDefined(args.readonly)}\n          ?required=${ifDefined(args.required)}\n          value=${ifDefined(args.value)}\n          @valueChange=${e => eventsFromNames.valueChange(e)}\n          @valueInput=${e => eventsFromNames.valueInput(e)}\n        >\n        </dnn-input>\n    `',...Text.parameters?.docs?.source}}}},"../../node_modules/lit-html/directives/if-defined.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{J:()=>to});var _lit_html_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/lit-html/lit-html.js");const to=t=>t??_lit_html_js__WEBPACK_IMPORTED_MODULE_0__.s6}}]);
//# sourceMappingURL=components-dnn-textarea-dnn-textarea-stories.469ba03e.iframe.bundle.js.map