{"version":3,"file":"dnn-monaco-editor.js","sourceRoot":"","sources":["../../../src/components/dnn-monaco-editor/dnn-monaco-editor.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAsB,OAAO,EAAE,KAAK,EAAgB,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AACxH,OAAO,KAAK,MAAM,MAAM,eAAe,CAAC;AAExC,OAAO,EAAC,UAAU,EAAE,YAAY,EAAC,MAAM,oBAAoB,CAAC;AAC5D,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,0DAA0D,CAAC;AAChG,OAAO,EAAE,MAAM,IAAI,SAAS,EAAE,MAAM,wDAAwD,CAAC;AAC7F,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,0DAA0D,CAAC;AAChG,OAAO,EAAE,MAAM,IAAI,QAAQ,EAAE,MAAM,8DAA8D,CAAC;AAClG,OAAO,EAAE,MAAM,IAAI,YAAY,EAAE,MAAM,qDAAqD,CAAC;AAO7F,MAAM,OAAO,eAAe;;IAkBT,mBAAc,GAAuD;MACpF,eAAe,EAAE,IAAI;MACrB,QAAQ,EAAE,YAAY;MACtB,WAAW,EAAE,IAAI;MACjB,oBAAoB,EAAE,IAAI;MAC1B,YAAY,EAAE,IAAI;MAClB,OAAO,EAAE;QACP,OAAO,EAAE,IAAI;OACd;MACD,QAAQ,EAAE,KAAK;MACf,gBAAgB,EAAE,KAAK;MACvB,oBAAoB,EAAE,KAAK;MAC3B,KAAK,EAAE,SAAS;MAChB,QAAQ,EAAE,gBAAgB;MAC1B,cAAc,EAAE,EAAE;MAClB,cAAc,EAAE,QAAQ;KACzB,CAAC;;6BAzBmC,KAAK;;EA2B1C,iBAAiB;IACd,IAAY,CAAC,iBAAiB,GAAG;MAChC,SAAS,EAAE,UAAU,SAAS,EAAE,KAAK;QACjC,IAAI,KAAK,KAAK,MAAM,EAAE;UACpB,OAAO,UAAU,CAAC;SACnB;QACD,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,EAAE;UAC3D,OAAO,SAAS,CAAC;SAClB;QACD,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,YAAY,IAAI,KAAK,KAAK,OAAO,EAAE;UACnE,OAAO,UAAU,CAAC;SACnB;QACD,IAAI,KAAK,KAAK,YAAY,IAAI,KAAK,KAAK,YAAY,EAAE;UACpD,OAAO,QAAQ,CAAC;SACjB;QACD,OAAO,YAAY,CAAC;MACxB,CAAC;KACF,CAAC;IAEF,IAAI,IAAI,GAAG,4FAA4F,CAAC;IACxG,IAAI,IAAI,CAAC,iBAAiB,EAAE;MAC1B,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;MACtE,IAAI,GAAG,GAAG,IAAI,mCAAmC,CAAC;KACnD;IAED,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,KAAK,CAAC,SAAS,GAAG,kDAAkD,IAAI,yBAAyB,CAAC;IAClG,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;EACnC,CAAC;EAED,gBAAgB;IACd,MAAM,WAAW,GAAgB,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;IAEnF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,kBAC7C,KAAK,EAAE,YAAY,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,SAAS,CAAC,IAAI,EAAE,KAAI,EAAE,CAAC,IACrD,IAAI,CAAC,YAAY,EAAE,EACtB,CAAC;IAEH,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;EAC5B,CAAC;EAED,KAAK,CAAC,oBAAoB;IACxB,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;EACvB,CAAC;EAEO,OAAO;IACb,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;MACrD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;KAC1B;IAED,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;;MACnC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;MAE1C,MAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,0CAAE,OAAO,EAAE,CAAC;MAClC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,kCAAkC;EAElC,eAAe;;IACb,MAAA,IAAI,CAAC,MAAM,0CAAE,aAAa,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;EAClD,CAAC;EAED,0BAA0B;EAE1B,KAAK,CAAC,QAAQ;;IACZ,MAAA,IAAI,CAAC,MAAM,0CAAE,KAAK,EAAE,CAAC;EACvB,CAAC;EAED,kCAAkC;EAElC,KAAK,CAAC,cAAc,CAAC,UAAkB;;IACrC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAA,IAAI,CAAC,MAAM,0CAAE,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC;EACtE,CAAC;EAED,8DAA8D;EAE9D,KAAK,CAAC,QAAQ;;IACZ,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,MAAA,IAAI,CAAC,MAAM,0CAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;EAC9D,CAAC;EAED;;;KAGG;EAEH,KAAK,CAAC,QAAQ,CAAC,QAAgB;;IAC7B,MAAA,IAAI,CAAC,MAAM,0CAAE,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;EAChD,CAAC;EAEO,YAAY;IAClB,qDACK,IAAI,CAAC,cAAc,KACtB,oBAAoB,EAAE,IAAI,CAAC,IAAI,KAC5B,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,EACvB;EACJ,CAAC;EAED,MAAM;IACJ,OAAO,CACL,EAAC,IAAI;MACD,eAAS,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,GAAY;MACjD,WAAK,KAAK,EAAE,EAAC,OAAO,EAAE,MAAM,EAAC,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,EAAE,GAAQ,CAC7D,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import {Component, ComponentInterface, Element, Event, EventEmitter, h, Host, Method, Prop, Watch} from '@stencil/core';\r\nimport * as monaco from 'monaco-editor';\r\nimport { editor } from 'monaco-editor';\r\nimport {escapeCode, unescapeCode} from './utils/code.utils';\r\nimport { worker as jsonWorker } from 'monaco-editor/esm/vs/language/json/json.worker.js?worker';\r\nimport { worker as cssWorker } from 'monaco-editor/esm/vs/language/css/css.worker.js?worker';\r\nimport { worker as htmlWorker } from 'monaco-editor/esm/vs/language/html/html.worker.js?worker';\r\nimport { worker as tsWorker } from 'monaco-editor/esm/vs/language/typescript/ts.worker.js?worker';\r\nimport { worker as editorWorker } from 'monaco-editor/esm/vs/editor/editor.worker.js?worker';\r\n\r\n@Component({\r\n  tag: 'dnn-monaco-editor',\r\n  styleUrl: 'dnn-monaco-editor.scss',\r\n  shadow: true\r\n})\r\nexport class DnnMonacoEditor implements ComponentInterface {\r\n  @Element() private el: HTMLDnnMonacoEditorElement;\r\n\r\n  /** Sets the monaco editor options, see monaco options. */\r\n  @Prop() options: editor.IStandaloneEditorConstructionOptions;\r\n\r\n  /** Sets whether or not the codicon font is loaded from local. */\r\n  /** Default is false and the font will be loaded from https://unpkg.com/browse/@dnncommunity/dnn-elements@0.16.0-beta.4/dist/dnn/assets/monaco-editor/codicon.ttf */\r\n  /** If set to true, then it is the responsibility of the consumer to have codicon.ttf in their distribution (e.g., ./assets/monaco-editor/codicon.ttf). */\r\n  @Prop() loadFontFromLocal: boolean = false;\r\n\r\n  /** Event to indicate editor has loaded */\r\n  @Event() editorDidLoad: EventEmitter<void>;\r\n\r\n  private editor: monaco.editor.IStandaloneCodeEditor;\r\n  private article!: HTMLElement;\r\n  private aria!: HTMLDivElement;\r\n\r\n  private readonly defaultOptions: monaco.editor.IStandaloneEditorConstructionOptions = {\r\n    automaticLayout: true,\r\n    language: 'typescript',\r\n    lineNumbers: \"on\",\r\n    fixedOverflowWidgets: true,\r\n    useShadowDOM: true,\r\n    minimap: {\r\n      enabled: true\r\n    },\r\n    readOnly: false,\r\n    roundedSelection: false,\r\n    scrollBeyondLastLine: false,\r\n    theme: 'vs-dark',\r\n    wordWrap: 'wordWrapColumn',\r\n    wordWrapColumn: 80,\r\n    wrappingIndent: \"indent\",\r\n  };\r\n\r\n  connectedCallback() {\r\n    (self as any).MonacoEnvironment = {\r\n      getWorker: function (_moduleId, label) {\r\n          if (label === 'json') {\r\n            return jsonWorker;\r\n          }\r\n          if (label === 'css' || label === 'scss' || label === 'less') {\r\n            return cssWorker;\r\n          }\r\n          if (label === 'html' || label === 'handlebars' || label === 'razor') {\r\n            return htmlWorker;\r\n          }\r\n          if (label === 'typescript' || label === 'javascript') {\r\n            return tsWorker;\r\n          }\r\n          return editorWorker;\r\n      }\r\n    };\r\n\r\n    let path = 'https://unpkg.com/monaco-editor@0.34.1/min/vs/base/browser/ui/codicons/codicon/codicon.ttf';\r\n    if (this.loadFontFromLocal) {\r\n      path = import.meta.url.substring(0, import.meta.url.lastIndexOf('/'));\r\n      path = `${path}/assets/monaco-editor/codicon.ttf`;\r\n    }\r\n\r\n    const style = document.createElement('style');\r\n    style.innerText = `@font-face { font-family: 'codicon'; src: url('${path}') format('truetype');}`;\r\n    document.head.appendChild(style);\r\n  }\r\n\r\n  componentDidLoad() {\r\n    const slottedCode: HTMLElement = this.el.querySelector(':scope > *:first-of-type');\r\n\r\n    this.editor = monaco.editor.create(this.article, {\r\n      value: unescapeCode(slottedCode?.innerHTML.trim() || ''),\r\n      ...this.mergeOptions()\r\n    });\r\n\r\n    this.editorDidLoad.emit();\r\n  }\r\n\r\n  async disconnectedCallback() {\r\n    await this.dispose();\r\n  }\r\n\r\n  private dispose(): Promise<void> {\r\n    if (this.editor === null || this.editor === undefined) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return new Promise<void>((resolve) => {\r\n      this.editor.onDidDispose(() => resolve());\r\n\r\n      this.editor.getModel()?.dispose();\r\n      this.editor.dispose();\r\n    });\r\n  }\r\n\r\n  /** Watch editor option changes */\r\n  @Watch('options')\r\n  onOptionsChange() {\r\n    this.editor?.updateOptions(this.mergeOptions());\r\n  }\r\n\r\n  /** Set focus to editor */\r\n  @Method()\r\n  async setFocus() {\r\n    this.editor?.focus();\r\n  }\r\n\r\n  /** Update code language editor */\r\n  @Method()\r\n  async updateLanguage(languageId: string) {\r\n    monaco.editor.setModelLanguage(this.editor?.getModel(), languageId);\r\n  }\r\n\r\n  /** Get value of the current model attached to this editor. */\r\n  @Method()\r\n  async getValue(){\r\n    return Promise.resolve(escapeCode(this.editor?.getValue()));\r\n  }\r\n\r\n  /**\r\n   * Sets a new editor value.\r\n   * @param newValue The new value to set.\r\n   */\r\n  @Method()\r\n  async setValue(newValue: string){\r\n    this.editor?.setValue(unescapeCode(newValue));\r\n  }\r\n\r\n  private mergeOptions(): monaco.editor.IStandaloneEditorConstructionOptions {\r\n    return {\r\n      ...this.defaultOptions,\r\n      ariaContainerElement: this.aria,\r\n      ...(this.options || {})\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Host>\r\n          <article ref={el => this.article = el}></article>\r\n          <div style={{display: 'none'}} ref={el => this.aria = el}></div>\r\n      </Host>\r\n    );\r\n  }\r\n}"]}