 
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DnnAutocompleteSuggestion, NeedMoreItemsEventArgs } from "./components/dnn-autocomplete/types";
import { CheckedState } from "./components/dnn-checkbox/types";
import { DnnColorInfo } from "./components/dnn-color-input/dnn-color-info";
import { ColorInfo } from "./utilities/colorInfo";
import { DropzoneResx } from "./components/dnn-dropzone/types";
import { ImageCropperResx } from "./components/dnn-image-cropper/types";
import { IPermissions } from "./components/dnn-permissions-grid/permissions-interface";
import { IRoleGroup } from "./components/dnn-permissions-grid/role-group-interface";
import { IRole } from "./components/dnn-permissions-grid/role-interface";
import { ILocalization } from "./components/dnn-permissions-grid/localization-interface";
import { ISearchedUser } from "./components/dnn-permissions-grid/searched-user-interface";
import { Config } from "jodit/types/config";
import { DnnToggleChangeEventDetail } from "./components/dnn-toggle/toggle-interface";
export { DnnAutocompleteSuggestion, NeedMoreItemsEventArgs } from "./components/dnn-autocomplete/types";
export { CheckedState } from "./components/dnn-checkbox/types";
export { DnnColorInfo } from "./components/dnn-color-input/dnn-color-info";
export { ColorInfo } from "./utilities/colorInfo";
export { DropzoneResx } from "./components/dnn-dropzone/types";
export { ImageCropperResx } from "./components/dnn-image-cropper/types";
export { IPermissions } from "./components/dnn-permissions-grid/permissions-interface";
export { IRoleGroup } from "./components/dnn-permissions-grid/role-group-interface";
export { IRole } from "./components/dnn-permissions-grid/role-interface";
export { ILocalization } from "./components/dnn-permissions-grid/localization-interface";
export { ISearchedUser } from "./components/dnn-permissions-grid/searched-user-interface";
export { Config } from "jodit/types/config";
export { DnnToggleChangeEventDetail } from "./components/dnn-toggle/toggle-interface";
export namespace Components {
    interface DnnAutocomplete {
        /**
          * Defines the type of automatic completion the browser could use. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete": string;
        /**
          * Reports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         */
        "checkValidity": () => Promise<ValidityState>;
        /**
          * Defines whether the field is disabled.
         */
        "disabled": boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText": string;
        /**
          * The label for this autocomplete.
         */
        "label": string;
        /**
          * The name for this autocomplete when used in forms.
         */
        "name": string;
        /**
          * How many suggestions to preload in pixels of their height. This is used to calculate the virtual scroll height and request more items before they get into view.
         */
        "preloadThresholdPixels": number;
        /**
          * Callback to render suggestions, if not provided, only the label will be rendered.
         */
        "renderSuggestion": (suggestion: DnnAutocompleteSuggestion) => HTMLElement;
        /**
          * Defines whether the field requires having a value.
         */
        "required": boolean;
        /**
          * Can be used to set a custom validity message.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Sets the list of suggestions.
         */
        "suggestions": DnnAutocompleteSuggestion[];
        /**
          * The total amount of suggestions for the given search query. This can be used to show virtual scroll and pagination progressive feeding. The needMoreItems event should be used to request more items.
         */
        "totalSuggestions": number;
        /**
          * Defines the value for this autocomplete
         */
        "value": string;
    }
    interface DnnButton {
        /**
          * Defines the look of the button.
         */
        "appearance": 'primary' | 'danger' | 'secondary' | 'tertiary';
        /**
          * Optionally add a confirmation dialog before firing the action.
         */
        "confirm"?: boolean;
        /**
          * The text of the confirmation message;
         */
        "confirmMessage"?: string;
        /**
          * The text of the no button for confirmation.
         */
        "confirmNoText"?: string;
        /**
          * The text of the yes button for confirmation.
         */
        "confirmYesText"?: string;
        /**
          * Disables the button
         */
        "disabled": boolean;
        /**
          * Optional button type, can be either submit, reset or button and defaults to button if not specified. Warning: DNN wraps the whole page in a form, only use this if you are handling form submission manually. Warning: This will be deprecated in the next version and replaced with a new 'type' property.
         */
        "formButtonType": 'submit' | 'reset' | 'button';
        /**
          * Optionally reverses the button style.
         */
        "reversed": boolean;
        /**
          * Optionally sets the button size, small normal or large, defaults to normal
         */
        "size"?: 'small' | 'normal' | 'large';
        /**
          * Optional button style,
          * @deprecated This property will be reused in the next version to represent the type of button like "submit" or "reset". Use the appearance property instead.
         */
        "type": 'primary' | 'danger' | 'secondary' | 'tertiary';
    }
    /**
     * @deprecated - The label for the checkbox - Obsolete, implement your own label.
     */
    interface DnnCheckbox {
        /**
          * Defines if the checkbox is checked (true) or unchecked (false) or in an intermediate state (undefined)
         */
        "checked": CheckedState;
        /**
          * The name to show in the formData (if using forms).
         */
        "name": string;
        /**
          * Defines if clicking the checkbox will go through the intermediate state between checked and unchecked (tri-state)
         */
        "useIntermediate": boolean;
        /**
          * The value for this checkbox (not to be confused with its checked state).
         */
        "value": string;
    }
    interface DnnChevron {
        /**
          * Collapse text for screen readers
         */
        "collapseText"?: string;
        /**
          * Expand text for screen readers
         */
        "expandText"?: string;
        /**
          * Is the chevron expanded
         */
        "expanded"?: boolean;
    }
    interface DnnCollapsible {
        /**
          * Defines if the panel is expanded or not.
         */
        "expanded": boolean;
        /**
          * Defines the transition time in ms, defaults to 150ms
         */
        "transitionDuration"?: number;
        /**
          * Updates the component height, use to update after a slot content changes.
         */
        "updateSize": () => Promise<void>;
    }
    /**
     * A custom input component that allows previewing and changing a color value.
     */
    interface DnnColorInput {
        /**
          * Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "color": string;
        /**
          * Sets the initial contrast color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "contrastColor": string;
        /**
          * Sets the initial dark color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "darkColor": string;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText": string;
        /**
          * The label for this input.
         */
        "label": string;
        /**
          * Sets the initial light color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "lightColor": string;
        /**
          * Can be used to customize the text language.
         */
        "localization": {
    contrast: string,
    preview: string,
    cancel: string,
    confirm: string,
    normal: string,
    light: string,
    dark: string,
  };
        /**
          * The name for this input if forms are used.
         */
        "name": string;
        /**
          * Disables interacting with the component.
         */
        "readonly": boolean;
        /**
          * If true, the picker will allow selecting a contast color too.
         */
        "useContrastColor": boolean;
        /**
          * If true, the picker will allow selecting a dark color too.
         */
        "useDarkColor": boolean;
        /**
          * If true, the picker will allow selecting a light color too.
         */
        "useLightColor": boolean;
    }
    /**
     * Color Picker for Dnn
     */
    interface DnnColorPicker {
        /**
          * Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "color": string;
        /**
          * Sets the width-height ratio of the color picker saturation-lightness box.
          * @example 100% renders a perfect square
         */
        "colorBoxHeight": string;
    }
    interface DnnDropzone {
        /**
          * If true, will allow the user to take a snapshot using the device camera. (only works over https).
         */
        "allowCameraMode": boolean;
        /**
          * A list of allowed file extensions. If not specified, any file is allowed. Ex: ["jpg", "jpeg", "gif", "png"]
         */
        "allowedExtensions": string[];
        /**
          * Specifies the jpeg quality for when the device camera is used to generate a picture. Needs to be a number between 0 and 1 and defaults to 0.8
         */
        "captureQuality": number;
        /**
          * Max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * The name of the field when used in a form.
         */
        "name": string;
        /**
          * Localization strings
         */
        "resx": DropzoneResx;
    }
    /**
     * Do not use this component in production, it is meant for testing purposes only and is not distributed in the production package.
     */
    interface DnnExampleForm {
    }
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface DnnFieldset {
        /**
          * Sets the fieldset to a disabled state.
         */
        "disable": () => Promise<void>;
        /**
          * If true, the fieldset will display as disabled.
         */
        "disabled": boolean;
        /**
          * Sets the fieldset to an enabled state.
         */
        "enable": () => Promise<void>;
        /**
          * If true, the label will float in the container, set false to show it on top.
         */
        "floatLabel": boolean;
        /**
          * If true the fieldset will display as focused.
         */
        "focused": boolean;
        /**
          * Can be used to show some help text about this field.
         */
        "helpText": string;
        /**
          * If true, the  fieldset will display as invalid.
         */
        "invalid": boolean;
        /**
          * Sets the text of the fieldset label (caption).
         */
        "label": string;
        /**
          * Places the label on the top of the container.
         */
        "pinLabel": () => Promise<void>;
        /**
          * Can be set to specify if the fieldset can be resized by the user.
         */
        "resizable": "none" | "both" | "horizontal" | "vertical" | "block" | "inline";
        /**
          * Unsets the fieldset focused state.
         */
        "setBlurred": () => Promise<void>;
        /**
          * Sets the fieldset to the focused state.
         */
        "setFocused": () => Promise<void>;
        /**
          * Sets the validity of the field.
         */
        "setValidity": (valid: boolean, message?: string) => Promise<void>;
        /**
          * Places the label in the vertical middle of the container.
         */
        "unpinLabel": () => Promise<void>;
    }
    /**
     * Allows cropping an image in-browser with the option to enforce a specific final size.
     * All computation happens in the browser and the final image is emmited
     * in an event that has a data-url of the image.
     */
    interface DnnImageCropper {
        /**
          * Clears the current image and crop (resets the component).
         */
        "clear": () => Promise<void>;
        /**
          * Sets the desired final image height.
         */
        "height": number;
        /**
          * The name of the control when used in a form.
         */
        "name": string;
        /**
          * When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry.
         */
        "preventUndersized": boolean;
        /**
          * Sets the output quality of the cropped image (number between 0 and 1).
         */
        "quality": number;
        /**
          * Can be used to customize controls text. Some values support tokens, see default values for examples.
         */
        "resx": ImageCropperResx;
        /**
          * Sets the desired final image width.
         */
        "width": number;
    }
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface DnnInput {
        /**
          * If true, enables users to switch between a password and a text field (to view their password).
         */
        "allowShowPassword": boolean;
        /**
          * Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete.
         */
        "autocomplete": string;
        /**
          * Reports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         */
        "checkValidity": () => Promise<ValidityState>;
        /**
          * @deprecated This control has it's own validation reporting, will be removed in v0.25.0
         */
        "disableValidityReporting": boolean;
        /**
          * Defines whether the field is disabled.
         */
        "disabled": boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText": string;
        /**
          * Hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard.
         */
        "inputmode": "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
        /**
          * The label for this input.
         */
        "label": string;
        /**
          * Defines the maximum allowed value.
         */
        "max": number | string;
        /**
          * Defines the maximum amount of charaters.
         */
        "maxlength": number;
        /**
          * Defines the minimum allowed value.
         */
        "min": number | string;
        /**
          * Defines the minimum amount of charaters.
         */
        "minlength": number;
        /**
          * If true, allows multiple emails to be entered separated by commas.
         */
        "multiple": boolean;
        /**
          * The name for this input when used in forms.
         */
        "name": string;
        /**
          * Valid for text, search, url, tel, email, and password, the pattern attribute defines a regular expression that the input's value must match in order for the value to pass constraint validation.
         */
        "pattern": string;
        /**
          * Defines wheter the defined value is readonly.
         */
        "readonly": boolean;
        /**
          * Defines whether the field requires having a value.
         */
        "required": boolean;
        /**
          * Can be used to set a custom validity message.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Defines the possible steps for numbers and dates/times. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#step
         */
        "step": string | number;
        /**
          * The input type, supports most of html standard input type, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types.
         */
        "type": "date" | "datetime-local" | "email" | "number" | "password" | "tel" | "text" | "time" | "url" | "search";
        /**
          * The value of the input.
         */
        "value": number | string | string[];
    }
    interface DnnModal {
        /**
          * Pass false to remove the backdrop click auto-dismiss feature.
         */
        "backdropDismiss": boolean;
        /**
          * Optionally pass the aria-label text for the close button. Defaults to "Close modal" if not provided.
         */
        "closeText"?: string;
        /**
          * Hides the modal
         */
        "hide": () => Promise<void>;
        /**
          * If set to true, the modal becomes resizable.
         */
        "resizable"?: boolean;
        /**
          * Shows the modal
         */
        "show": () => Promise<void>;
        /**
          * Optionally you can pass false to not show the close button. If you decide to do so, you should either not also prevent dismissal by clicking the backdrop or provide your own dismissal logic in the modal content.
         */
        "showCloseButton"?: boolean;
        /**
          * Reflects the visible state of the modal.
         */
        "visible": boolean;
    }
    interface DnnMonacoEditor {
        /**
          * Defines the language for the editor.
         */
        "language": "plaintext" | "bat" | "coffeescript" | "c" | "cpp" | "csharp" | "dockerfile" | "fsharp" | "go" | "handlebars" | "html" | "ini" | "pug" | "java" | "lua" | "markdown" | "msdax" | "objective-c" | "postiats" | "php" | "powershell" | "python" | "r" | "razor" | "ruby" | "swift" | "sql" | "vb" | "xml" | "less" | "scss" | "css" | "yaml" | "sol" | "sb" | "json" | "typescript" | "javascript";
        /**
          * The name of the control to use for forms.
         */
        "name": string;
        /**
          * Sets the code contained in the editor
         */
        "value": string;
    }
    interface DnnPermissionsGrid {
        /**
          * The list of users to show under the search users field when a search is performed.
         */
        "foundUsers": ISearchedUser[];
        /**
          * The list of permissions.
         */
        "permissions": IPermissions;
        /**
          * Optionally allows localizing the component strings.
         */
        "resx": ILocalization;
        /**
          * The list of role groups.
         */
        "roleGroups": IRoleGroup[];
        /**
          * The list of possible roles.
         */
        "roles": IRole[];
    }
    interface DnnProgressBar {
        /**
          * Sets the max value for the progress bar.
         */
        "max": number;
        /**
          * Determines if gradient colors will be used for progress bar.
         */
        "useGradient": boolean;
        /**
          * Sets to current value for the progress bar.
         */
        "value": number;
    }
    interface DnnRichtext {
        /**
          * Name of the field when used in a form.
         */
        "name": string;
        /**
          * Optional configuration for Jodit, see https://xdsoft.net/jodit/docs/classes/config.Config.html
         */
        "options": Config;
        /**
          * Sets the value of the content of the editor.
         */
        "value": string;
    }
    interface DnnSearchbox {
        /**
          * How many milliseconds to wait before firing the queryChanged event.
         */
        "debounceTime": number;
        /**
          * @deprecated Use debounceTime (or debounce-time) instead. Will be removed in v0.25.0 Debounces the queryChanged by 500ms.
         */
        "debounced": boolean;
        /**
          * Sets the field placeholder text.
         */
        "placeholder"?: string;
        /**
          * Sets the query
         */
        "query": string;
    }
    interface DnnSelect {
        /**
          * Defines the type of automatic completion the browser can use. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete": string;
        /**
          * Reports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         */
        "checkValidity": () => Promise<ValidityState>;
        /**
          * @deprecated This control has its own validatin reporting, will be removed in v0.25.0
         */
        "disableValidityReporting": boolean;
        /**
          * Defines whether the field is disabled.
         */
        "disabled": boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText": string;
        /**
          * The label for this input.
         */
        "label": string;
        /**
          * The name for this input, if used in forms.
         */
        "name": string;
        /**
          * Defines whether the field requires having a value.
         */
        "required": boolean;
        /**
          * The value of the input.
         */
        "value": string;
    }
    interface DnnSortIcon {
        /**
          * Defines the current sort direction
         */
        "sortDirection": "asc" | "desc" | "none";
    }
    /**
     * Represents a single tab and must be used inside a dnn-tabs element.
     */
    interface DnnTab {
        /**
          * Hides the modal
         */
        "hide": () => Promise<void>;
        /**
          * Shows the tab.
         */
        "show": () => Promise<void>;
        /**
          * Defines the tab title.
         */
        "tabTitle": string;
    }
    interface DnnTabs {
    }
    /**
     * A custom textarea component.
     */
    interface DnnTextarea {
        /**
          * Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete.
         */
        "autocomplete": string;
        /**
          * Reports the input validity details. See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         */
        "checkValidity": () => Promise<ValidityState>;
        /**
          * Defines whether the field is disabled.
         */
        "disabled": boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText": string;
        /**
          * The label for this input.
         */
        "label": string;
        /**
          * Defines the maximum amount of charaters.
         */
        "maxlength": number;
        /**
          * Defines the minimum amount of charaters.
         */
        "minlength": number;
        /**
          * The name for this input when used in forms.
         */
        "name": string;
        /**
          * Defines wheter the defined value is readonly.
         */
        "readonly": boolean;
        /**
          * Defines whether the field requires having a value.
         */
        "required": boolean;
        /**
          * Can be set to change how the user can resize the field.
         */
        "resizable": "none" | "both" | "horizontal" | "vertical" | "block" | "inline";
        /**
          * Defines how many rows (lines of text) to initially show.
         */
        "rows": number;
        /**
          * Can be used to set a custom validity message.
         */
        "setCustomValidity": (message: string) => Promise<void>;
        /**
          * Sets the value of the textarea.
         */
        "value": string;
    }
    interface DnnToggle {
        /**
          * If 'true' the toggle is checked (on).
         */
        "checked": boolean;
        /**
          * If 'true' the toggle is not be interacted with.
         */
        "disabled": boolean;
        /**
          * The field name to use in forms.
         */
        "name": string;
        /**
          * The value to post when used in forms.
         */
        "value": string;
    }
    interface DnnTreeviewItem {
        /**
          * Defines if the current node is expanded.
         */
        "expanded": boolean;
    }
    /**
     * A component that shows a vertical list of items as they fit. When they don't all fit, it puts the ones that don't fit into a dropdown menu.
     */
    interface DnnVerticalOverflowMenu {
    }
    interface DnnVerticalSplitview {
        /**
          * Gets the current divider position percentage.
         */
        "getSplitWidthPercentage": () => Promise<number>;
        /**
          * Sets the width percentage of the divider
         */
        "setSplitWidthPercentage": (newWidth: number) => Promise<void>;
        /**
          * The percentage position of the splitter in the container.
         */
        "splitWidthPercentage": number;
        /**
          * The width of the splitter area.
         */
        "splitterWidth": number;
    }
}
export interface DnnAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnAutocompleteElement;
}
export interface DnnButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnButtonElement;
}
export interface DnnCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnCheckboxElement;
}
export interface DnnChevronCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnChevronElement;
}
export interface DnnCollapsibleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnCollapsibleElement;
}
export interface DnnColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnColorInputElement;
}
export interface DnnColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnColorPickerElement;
}
export interface DnnDropzoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnDropzoneElement;
}
export interface DnnImageCropperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnImageCropperElement;
}
export interface DnnInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnInputElement;
}
export interface DnnModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnModalElement;
}
export interface DnnMonacoEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnMonacoEditorElement;
}
export interface DnnPermissionsGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnPermissionsGridElement;
}
export interface DnnRichtextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnRichtextElement;
}
export interface DnnSearchboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnSearchboxElement;
}
export interface DnnSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnSelectElement;
}
export interface DnnSortIconCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnSortIconElement;
}
export interface DnnTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnTextareaElement;
}
export interface DnnToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnToggleElement;
}
export interface DnnTreeviewItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnTreeviewItemElement;
}
export interface DnnVerticalSplitviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDnnVerticalSplitviewElement;
}
declare global {
    interface HTMLDnnAutocompleteElementEventMap {
        "valueChange": number | string | string[];
        "valueInput": number | string | string[];
        "needMoreItems": NeedMoreItemsEventArgs;
        "searchQueryChanged": string;
        "itemSelected": string;
    }
    interface HTMLDnnAutocompleteElement extends Components.DnnAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnAutocompleteElementEventMap>(type: K, listener: (this: HTMLDnnAutocompleteElement, ev: DnnAutocompleteCustomEvent<HTMLDnnAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnAutocompleteElementEventMap>(type: K, listener: (this: HTMLDnnAutocompleteElement, ev: DnnAutocompleteCustomEvent<HTMLDnnAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnAutocompleteElement: {
        prototype: HTMLDnnAutocompleteElement;
        new (): HTMLDnnAutocompleteElement;
    };
    interface HTMLDnnButtonElementEventMap {
        "confirmed": any;
        "canceled": any;
    }
    interface HTMLDnnButtonElement extends Components.DnnButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnButtonElementEventMap>(type: K, listener: (this: HTMLDnnButtonElement, ev: DnnButtonCustomEvent<HTMLDnnButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnButtonElementEventMap>(type: K, listener: (this: HTMLDnnButtonElement, ev: DnnButtonCustomEvent<HTMLDnnButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnButtonElement: {
        prototype: HTMLDnnButtonElement;
        new (): HTMLDnnButtonElement;
    };
    interface HTMLDnnCheckboxElementEventMap {
        "checkedchange": "checked" | "unchecked" | "intermediate";
    }
    /**
     * @deprecated - The label for the checkbox - Obsolete, implement your own label.
     */
    interface HTMLDnnCheckboxElement extends Components.DnnCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnCheckboxElementEventMap>(type: K, listener: (this: HTMLDnnCheckboxElement, ev: DnnCheckboxCustomEvent<HTMLDnnCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnCheckboxElementEventMap>(type: K, listener: (this: HTMLDnnCheckboxElement, ev: DnnCheckboxCustomEvent<HTMLDnnCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnCheckboxElement: {
        prototype: HTMLDnnCheckboxElement;
        new (): HTMLDnnCheckboxElement;
    };
    interface HTMLDnnChevronElementEventMap {
        "changed": any;
    }
    interface HTMLDnnChevronElement extends Components.DnnChevron, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnChevronElementEventMap>(type: K, listener: (this: HTMLDnnChevronElement, ev: DnnChevronCustomEvent<HTMLDnnChevronElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnChevronElementEventMap>(type: K, listener: (this: HTMLDnnChevronElement, ev: DnnChevronCustomEvent<HTMLDnnChevronElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnChevronElement: {
        prototype: HTMLDnnChevronElement;
        new (): HTMLDnnChevronElement;
    };
    interface HTMLDnnCollapsibleElementEventMap {
        "dnnCollapsibleHeightChanged": void;
    }
    interface HTMLDnnCollapsibleElement extends Components.DnnCollapsible, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnCollapsibleElementEventMap>(type: K, listener: (this: HTMLDnnCollapsibleElement, ev: DnnCollapsibleCustomEvent<HTMLDnnCollapsibleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnCollapsibleElementEventMap>(type: K, listener: (this: HTMLDnnCollapsibleElement, ev: DnnCollapsibleCustomEvent<HTMLDnnCollapsibleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnCollapsibleElement: {
        prototype: HTMLDnnCollapsibleElement;
        new (): HTMLDnnCollapsibleElement;
    };
    interface HTMLDnnColorInputElementEventMap {
        "colorChange": DnnColorInfo;
        "colorInput": DnnColorInfo;
    }
    /**
     * A custom input component that allows previewing and changing a color value.
     */
    interface HTMLDnnColorInputElement extends Components.DnnColorInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnColorInputElementEventMap>(type: K, listener: (this: HTMLDnnColorInputElement, ev: DnnColorInputCustomEvent<HTMLDnnColorInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnColorInputElementEventMap>(type: K, listener: (this: HTMLDnnColorInputElement, ev: DnnColorInputCustomEvent<HTMLDnnColorInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnColorInputElement: {
        prototype: HTMLDnnColorInputElement;
        new (): HTMLDnnColorInputElement;
    };
    interface HTMLDnnColorPickerElementEventMap {
        "colorChanged": ColorInfo;
    }
    /**
     * Color Picker for Dnn
     */
    interface HTMLDnnColorPickerElement extends Components.DnnColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnColorPickerElementEventMap>(type: K, listener: (this: HTMLDnnColorPickerElement, ev: DnnColorPickerCustomEvent<HTMLDnnColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnColorPickerElementEventMap>(type: K, listener: (this: HTMLDnnColorPickerElement, ev: DnnColorPickerCustomEvent<HTMLDnnColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnColorPickerElement: {
        prototype: HTMLDnnColorPickerElement;
        new (): HTMLDnnColorPickerElement;
    };
    interface HTMLDnnDropzoneElementEventMap {
        "filesSelected": File[];
    }
    interface HTMLDnnDropzoneElement extends Components.DnnDropzone, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnDropzoneElementEventMap>(type: K, listener: (this: HTMLDnnDropzoneElement, ev: DnnDropzoneCustomEvent<HTMLDnnDropzoneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnDropzoneElementEventMap>(type: K, listener: (this: HTMLDnnDropzoneElement, ev: DnnDropzoneCustomEvent<HTMLDnnDropzoneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnDropzoneElement: {
        prototype: HTMLDnnDropzoneElement;
        new (): HTMLDnnDropzoneElement;
    };
    /**
     * Do not use this component in production, it is meant for testing purposes only and is not distributed in the production package.
     */
    interface HTMLDnnExampleFormElement extends Components.DnnExampleForm, HTMLStencilElement {
    }
    var HTMLDnnExampleFormElement: {
        prototype: HTMLDnnExampleFormElement;
        new (): HTMLDnnExampleFormElement;
    };
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface HTMLDnnFieldsetElement extends Components.DnnFieldset, HTMLStencilElement {
    }
    var HTMLDnnFieldsetElement: {
        prototype: HTMLDnnFieldsetElement;
        new (): HTMLDnnFieldsetElement;
    };
    interface HTMLDnnImageCropperElementEventMap {
        "imageCropChanged": string;
        "imageFileCropChanged": File;
    }
    /**
     * Allows cropping an image in-browser with the option to enforce a specific final size.
     * All computation happens in the browser and the final image is emmited
     * in an event that has a data-url of the image.
     */
    interface HTMLDnnImageCropperElement extends Components.DnnImageCropper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnImageCropperElementEventMap>(type: K, listener: (this: HTMLDnnImageCropperElement, ev: DnnImageCropperCustomEvent<HTMLDnnImageCropperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnImageCropperElementEventMap>(type: K, listener: (this: HTMLDnnImageCropperElement, ev: DnnImageCropperCustomEvent<HTMLDnnImageCropperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnImageCropperElement: {
        prototype: HTMLDnnImageCropperElement;
        new (): HTMLDnnImageCropperElement;
    };
    interface HTMLDnnInputElementEventMap {
        "valueChange": number | string | string[];
        "valueInput": number | string | string[];
    }
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface HTMLDnnInputElement extends Components.DnnInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnInputElementEventMap>(type: K, listener: (this: HTMLDnnInputElement, ev: DnnInputCustomEvent<HTMLDnnInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnInputElementEventMap>(type: K, listener: (this: HTMLDnnInputElement, ev: DnnInputCustomEvent<HTMLDnnInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnInputElement: {
        prototype: HTMLDnnInputElement;
        new (): HTMLDnnInputElement;
    };
    interface HTMLDnnModalElementEventMap {
        "dismissed": any;
    }
    interface HTMLDnnModalElement extends Components.DnnModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnModalElementEventMap>(type: K, listener: (this: HTMLDnnModalElement, ev: DnnModalCustomEvent<HTMLDnnModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnModalElementEventMap>(type: K, listener: (this: HTMLDnnModalElement, ev: DnnModalCustomEvent<HTMLDnnModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnModalElement: {
        prototype: HTMLDnnModalElement;
        new (): HTMLDnnModalElement;
    };
    interface HTMLDnnMonacoEditorElementEventMap {
        "contentChanged": string;
    }
    interface HTMLDnnMonacoEditorElement extends Components.DnnMonacoEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnMonacoEditorElementEventMap>(type: K, listener: (this: HTMLDnnMonacoEditorElement, ev: DnnMonacoEditorCustomEvent<HTMLDnnMonacoEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnMonacoEditorElementEventMap>(type: K, listener: (this: HTMLDnnMonacoEditorElement, ev: DnnMonacoEditorCustomEvent<HTMLDnnMonacoEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnMonacoEditorElement: {
        prototype: HTMLDnnMonacoEditorElement;
        new (): HTMLDnnMonacoEditorElement;
    };
    interface HTMLDnnPermissionsGridElementEventMap {
        "userSearchQueryChanged": string;
        "permissionsChanged": IPermissions;
    }
    interface HTMLDnnPermissionsGridElement extends Components.DnnPermissionsGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnPermissionsGridElementEventMap>(type: K, listener: (this: HTMLDnnPermissionsGridElement, ev: DnnPermissionsGridCustomEvent<HTMLDnnPermissionsGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnPermissionsGridElementEventMap>(type: K, listener: (this: HTMLDnnPermissionsGridElement, ev: DnnPermissionsGridCustomEvent<HTMLDnnPermissionsGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnPermissionsGridElement: {
        prototype: HTMLDnnPermissionsGridElement;
        new (): HTMLDnnPermissionsGridElement;
    };
    interface HTMLDnnProgressBarElement extends Components.DnnProgressBar, HTMLStencilElement {
    }
    var HTMLDnnProgressBarElement: {
        prototype: HTMLDnnProgressBarElement;
        new (): HTMLDnnProgressBarElement;
    };
    interface HTMLDnnRichtextElementEventMap {
        "valueChange": string;
        "valueInput": string;
    }
    interface HTMLDnnRichtextElement extends Components.DnnRichtext, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnRichtextElementEventMap>(type: K, listener: (this: HTMLDnnRichtextElement, ev: DnnRichtextCustomEvent<HTMLDnnRichtextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnRichtextElementEventMap>(type: K, listener: (this: HTMLDnnRichtextElement, ev: DnnRichtextCustomEvent<HTMLDnnRichtextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnRichtextElement: {
        prototype: HTMLDnnRichtextElement;
        new (): HTMLDnnRichtextElement;
    };
    interface HTMLDnnSearchboxElementEventMap {
        "queryChanged": string;
    }
    interface HTMLDnnSearchboxElement extends Components.DnnSearchbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnSearchboxElementEventMap>(type: K, listener: (this: HTMLDnnSearchboxElement, ev: DnnSearchboxCustomEvent<HTMLDnnSearchboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnSearchboxElementEventMap>(type: K, listener: (this: HTMLDnnSearchboxElement, ev: DnnSearchboxCustomEvent<HTMLDnnSearchboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnSearchboxElement: {
        prototype: HTMLDnnSearchboxElement;
        new (): HTMLDnnSearchboxElement;
    };
    interface HTMLDnnSelectElementEventMap {
        "valueChange": string;
    }
    interface HTMLDnnSelectElement extends Components.DnnSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnSelectElementEventMap>(type: K, listener: (this: HTMLDnnSelectElement, ev: DnnSelectCustomEvent<HTMLDnnSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnSelectElementEventMap>(type: K, listener: (this: HTMLDnnSelectElement, ev: DnnSelectCustomEvent<HTMLDnnSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnSelectElement: {
        prototype: HTMLDnnSelectElement;
        new (): HTMLDnnSelectElement;
    };
    interface HTMLDnnSortIconElementEventMap {
        "sortChanged": "asc"|"desc"|"none";
    }
    interface HTMLDnnSortIconElement extends Components.DnnSortIcon, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnSortIconElementEventMap>(type: K, listener: (this: HTMLDnnSortIconElement, ev: DnnSortIconCustomEvent<HTMLDnnSortIconElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnSortIconElementEventMap>(type: K, listener: (this: HTMLDnnSortIconElement, ev: DnnSortIconCustomEvent<HTMLDnnSortIconElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnSortIconElement: {
        prototype: HTMLDnnSortIconElement;
        new (): HTMLDnnSortIconElement;
    };
    /**
     * Represents a single tab and must be used inside a dnn-tabs element.
     */
    interface HTMLDnnTabElement extends Components.DnnTab, HTMLStencilElement {
    }
    var HTMLDnnTabElement: {
        prototype: HTMLDnnTabElement;
        new (): HTMLDnnTabElement;
    };
    interface HTMLDnnTabsElement extends Components.DnnTabs, HTMLStencilElement {
    }
    var HTMLDnnTabsElement: {
        prototype: HTMLDnnTabsElement;
        new (): HTMLDnnTabsElement;
    };
    interface HTMLDnnTextareaElementEventMap {
        "valueInput": string;
        "valueChange": string;
    }
    /**
     * A custom textarea component.
     */
    interface HTMLDnnTextareaElement extends Components.DnnTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnTextareaElementEventMap>(type: K, listener: (this: HTMLDnnTextareaElement, ev: DnnTextareaCustomEvent<HTMLDnnTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnTextareaElementEventMap>(type: K, listener: (this: HTMLDnnTextareaElement, ev: DnnTextareaCustomEvent<HTMLDnnTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnTextareaElement: {
        prototype: HTMLDnnTextareaElement;
        new (): HTMLDnnTextareaElement;
    };
    interface HTMLDnnToggleElementEventMap {
        "checkChanged": DnnToggleChangeEventDetail;
    }
    interface HTMLDnnToggleElement extends Components.DnnToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnToggleElementEventMap>(type: K, listener: (this: HTMLDnnToggleElement, ev: DnnToggleCustomEvent<HTMLDnnToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnToggleElementEventMap>(type: K, listener: (this: HTMLDnnToggleElement, ev: DnnToggleCustomEvent<HTMLDnnToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnToggleElement: {
        prototype: HTMLDnnToggleElement;
        new (): HTMLDnnToggleElement;
    };
    interface HTMLDnnTreeviewItemElementEventMap {
        "userExpanded": void;
        "userCollapsed": void;
    }
    interface HTMLDnnTreeviewItemElement extends Components.DnnTreeviewItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnTreeviewItemElementEventMap>(type: K, listener: (this: HTMLDnnTreeviewItemElement, ev: DnnTreeviewItemCustomEvent<HTMLDnnTreeviewItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnTreeviewItemElementEventMap>(type: K, listener: (this: HTMLDnnTreeviewItemElement, ev: DnnTreeviewItemCustomEvent<HTMLDnnTreeviewItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnTreeviewItemElement: {
        prototype: HTMLDnnTreeviewItemElement;
        new (): HTMLDnnTreeviewItemElement;
    };
    /**
     * A component that shows a vertical list of items as they fit. When they don't all fit, it puts the ones that don't fit into a dropdown menu.
     */
    interface HTMLDnnVerticalOverflowMenuElement extends Components.DnnVerticalOverflowMenu, HTMLStencilElement {
    }
    var HTMLDnnVerticalOverflowMenuElement: {
        prototype: HTMLDnnVerticalOverflowMenuElement;
        new (): HTMLDnnVerticalOverflowMenuElement;
    };
    interface HTMLDnnVerticalSplitviewElementEventMap {
        "widthChanged": number;
    }
    interface HTMLDnnVerticalSplitviewElement extends Components.DnnVerticalSplitview, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDnnVerticalSplitviewElementEventMap>(type: K, listener: (this: HTMLDnnVerticalSplitviewElement, ev: DnnVerticalSplitviewCustomEvent<HTMLDnnVerticalSplitviewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDnnVerticalSplitviewElementEventMap>(type: K, listener: (this: HTMLDnnVerticalSplitviewElement, ev: DnnVerticalSplitviewCustomEvent<HTMLDnnVerticalSplitviewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDnnVerticalSplitviewElement: {
        prototype: HTMLDnnVerticalSplitviewElement;
        new (): HTMLDnnVerticalSplitviewElement;
    };
    interface HTMLElementTagNameMap {
        "dnn-autocomplete": HTMLDnnAutocompleteElement;
        "dnn-button": HTMLDnnButtonElement;
        "dnn-checkbox": HTMLDnnCheckboxElement;
        "dnn-chevron": HTMLDnnChevronElement;
        "dnn-collapsible": HTMLDnnCollapsibleElement;
        "dnn-color-input": HTMLDnnColorInputElement;
        "dnn-color-picker": HTMLDnnColorPickerElement;
        "dnn-dropzone": HTMLDnnDropzoneElement;
        "dnn-example-form": HTMLDnnExampleFormElement;
        "dnn-fieldset": HTMLDnnFieldsetElement;
        "dnn-image-cropper": HTMLDnnImageCropperElement;
        "dnn-input": HTMLDnnInputElement;
        "dnn-modal": HTMLDnnModalElement;
        "dnn-monaco-editor": HTMLDnnMonacoEditorElement;
        "dnn-permissions-grid": HTMLDnnPermissionsGridElement;
        "dnn-progress-bar": HTMLDnnProgressBarElement;
        "dnn-richtext": HTMLDnnRichtextElement;
        "dnn-searchbox": HTMLDnnSearchboxElement;
        "dnn-select": HTMLDnnSelectElement;
        "dnn-sort-icon": HTMLDnnSortIconElement;
        "dnn-tab": HTMLDnnTabElement;
        "dnn-tabs": HTMLDnnTabsElement;
        "dnn-textarea": HTMLDnnTextareaElement;
        "dnn-toggle": HTMLDnnToggleElement;
        "dnn-treeview-item": HTMLDnnTreeviewItemElement;
        "dnn-vertical-overflow-menu": HTMLDnnVerticalOverflowMenuElement;
        "dnn-vertical-splitview": HTMLDnnVerticalSplitviewElement;
    }
}
declare namespace LocalJSX {
    interface DnnAutocomplete {
        /**
          * Defines the type of automatic completion the browser could use. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * Defines whether the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText"?: string;
        /**
          * The label for this autocomplete.
         */
        "label"?: string;
        /**
          * The name for this autocomplete when used in forms.
         */
        "name"?: string;
        /**
          * Fires when an item is selected.
         */
        "onItemSelected"?: (event: DnnAutocompleteCustomEvent<string>) => void;
        /**
          * Fires when the component needs to display more items in the suggestions.
         */
        "onNeedMoreItems"?: (event: DnnAutocompleteCustomEvent<NeedMoreItemsEventArgs>) => void;
        /**
          * Fires when the search query has changed. This is almost like valueInput, but it is debounced and can be used to trigger a search query without overloading API endpoints while typing.
         */
        "onSearchQueryChanged"?: (event: DnnAutocompleteCustomEvent<string>) => void;
        /**
          * Fires when the value has changed and the user exits the input.
         */
        "onValueChange"?: (event: DnnAutocompleteCustomEvent<number | string | string[]>) => void;
        /**
          * Fires when the using is inputing data (on keystrokes).
         */
        "onValueInput"?: (event: DnnAutocompleteCustomEvent<number | string | string[]>) => void;
        /**
          * How many suggestions to preload in pixels of their height. This is used to calculate the virtual scroll height and request more items before they get into view.
         */
        "preloadThresholdPixels"?: number;
        /**
          * Callback to render suggestions, if not provided, only the label will be rendered.
         */
        "renderSuggestion"?: (suggestion: DnnAutocompleteSuggestion) => HTMLElement;
        /**
          * Defines whether the field requires having a value.
         */
        "required"?: boolean;
        /**
          * Sets the list of suggestions.
         */
        "suggestions"?: DnnAutocompleteSuggestion[];
        /**
          * The total amount of suggestions for the given search query. This can be used to show virtual scroll and pagination progressive feeding. The needMoreItems event should be used to request more items.
         */
        "totalSuggestions"?: number;
        /**
          * Defines the value for this autocomplete
         */
        "value"?: string;
    }
    interface DnnButton {
        /**
          * Defines the look of the button.
         */
        "appearance"?: 'primary' | 'danger' | 'secondary' | 'tertiary';
        /**
          * Optionally add a confirmation dialog before firing the action.
         */
        "confirm"?: boolean;
        /**
          * The text of the confirmation message;
         */
        "confirmMessage"?: string;
        /**
          * The text of the no button for confirmation.
         */
        "confirmNoText"?: string;
        /**
          * The text of the yes button for confirmation.
         */
        "confirmYesText"?: string;
        /**
          * Disables the button
         */
        "disabled"?: boolean;
        /**
          * Optional button type, can be either submit, reset or button and defaults to button if not specified. Warning: DNN wraps the whole page in a form, only use this if you are handling form submission manually. Warning: This will be deprecated in the next version and replaced with a new 'type' property.
         */
        "formButtonType"?: 'submit' | 'reset' | 'button';
        /**
          * Fires when confirm is true and the user cancels the action.
         */
        "onCanceled"?: (event: DnnButtonCustomEvent<any>) => void;
        /**
          * Fires when confirm is true and the user confirms the action.
         */
        "onConfirmed"?: (event: DnnButtonCustomEvent<any>) => void;
        /**
          * Optionally reverses the button style.
         */
        "reversed"?: boolean;
        /**
          * Optionally sets the button size, small normal or large, defaults to normal
         */
        "size"?: 'small' | 'normal' | 'large';
        /**
          * Optional button style,
          * @deprecated This property will be reused in the next version to represent the type of button like "submit" or "reset". Use the appearance property instead.
         */
        "type"?: 'primary' | 'danger' | 'secondary' | 'tertiary';
    }
    /**
     * @deprecated - The label for the checkbox - Obsolete, implement your own label.
     */
    interface DnnCheckbox {
        /**
          * Defines if the checkbox is checked (true) or unchecked (false) or in an intermediate state (undefined)
         */
        "checked"?: CheckedState;
        /**
          * The name to show in the formData (if using forms).
         */
        "name"?: string;
        /**
          * Fires up when the checkbox checked property changes.
         */
        "onCheckedchange"?: (event: DnnCheckboxCustomEvent<"checked" | "unchecked" | "intermediate">) => void;
        /**
          * Defines if clicking the checkbox will go through the intermediate state between checked and unchecked (tri-state)
         */
        "useIntermediate"?: boolean;
        /**
          * The value for this checkbox (not to be confused with its checked state).
         */
        "value"?: string;
    }
    interface DnnChevron {
        /**
          * Collapse text for screen readers
         */
        "collapseText"?: string;
        /**
          * Expand text for screen readers
         */
        "expandText"?: string;
        /**
          * Is the chevron expanded
         */
        "expanded"?: boolean;
        /**
          * Fires up when the expanded status changes
         */
        "onChanged"?: (event: DnnChevronCustomEvent<any>) => void;
    }
    interface DnnCollapsible {
        /**
          * Defines if the panel is expanded or not.
         */
        "expanded"?: boolean;
        /**
          * Fires whenever the collapsible height has changed
         */
        "onDnnCollapsibleHeightChanged"?: (event: DnnCollapsibleCustomEvent<void>) => void;
        /**
          * Defines the transition time in ms, defaults to 150ms
         */
        "transitionDuration"?: number;
    }
    /**
     * A custom input component that allows previewing and changing a color value.
     */
    interface DnnColorInput {
        /**
          * Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "color"?: string;
        /**
          * Sets the initial contrast color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "contrastColor"?: string;
        /**
          * Sets the initial dark color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "darkColor"?: string;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText"?: string;
        /**
          * The label for this input.
         */
        "label"?: string;
        /**
          * Sets the initial light color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "lightColor"?: string;
        /**
          * Can be used to customize the text language.
         */
        "localization"?: {
    contrast: string,
    preview: string,
    cancel: string,
    confirm: string,
    normal: string,
    light: string,
    dark: string,
  };
        /**
          * The name for this input if forms are used.
         */
        "name"?: string;
        /**
          * Fires when the color was changed and confirmed.
         */
        "onColorChange"?: (event: DnnColorInputCustomEvent<DnnColorInfo>) => void;
        /**
          * Fires live as the user is trying color changes inside the modal.
         */
        "onColorInput"?: (event: DnnColorInputCustomEvent<DnnColorInfo>) => void;
        /**
          * Disables interacting with the component.
         */
        "readonly"?: boolean;
        /**
          * If true, the picker will allow selecting a contast color too.
         */
        "useContrastColor"?: boolean;
        /**
          * If true, the picker will allow selecting a dark color too.
         */
        "useDarkColor"?: boolean;
        /**
          * If true, the picker will allow selecting a light color too.
         */
        "useLightColor"?: boolean;
    }
    /**
     * Color Picker for Dnn
     */
    interface DnnColorPicker {
        /**
          * Sets the initial color, must be a valid 8 character hexadecimal string without the # sign.
         */
        "color"?: string;
        /**
          * Sets the width-height ratio of the color picker saturation-lightness box.
          * @example 100% renders a perfect square
         */
        "colorBoxHeight"?: string;
        /**
          * Fires up when the color is changed and emits a ColorInfo object
          * @see .. /../utilities/colorInfo.ts
         */
        "onColorChanged"?: (event: DnnColorPickerCustomEvent<ColorInfo>) => void;
    }
    interface DnnDropzone {
        /**
          * If true, will allow the user to take a snapshot using the device camera. (only works over https).
         */
        "allowCameraMode"?: boolean;
        /**
          * A list of allowed file extensions. If not specified, any file is allowed. Ex: ["jpg", "jpeg", "gif", "png"]
         */
        "allowedExtensions"?: string[];
        /**
          * Specifies the jpeg quality for when the device camera is used to generate a picture. Needs to be a number between 0 and 1 and defaults to 0.8
         */
        "captureQuality"?: number;
        /**
          * Max file size in bytes.
         */
        "maxFileSize"?: number;
        /**
          * The name of the field when used in a form.
         */
        "name"?: string;
        /**
          * Fires when file were selected.
         */
        "onFilesSelected"?: (event: DnnDropzoneCustomEvent<File[]>) => void;
        /**
          * Localization strings
         */
        "resx"?: DropzoneResx;
    }
    /**
     * Do not use this component in production, it is meant for testing purposes only and is not distributed in the production package.
     */
    interface DnnExampleForm {
    }
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface DnnFieldset {
        /**
          * If true, the fieldset will display as disabled.
         */
        "disabled"?: boolean;
        /**
          * If true, the label will float in the container, set false to show it on top.
         */
        "floatLabel"?: boolean;
        /**
          * If true the fieldset will display as focused.
         */
        "focused"?: boolean;
        /**
          * Can be used to show some help text about this field.
         */
        "helpText"?: string;
        /**
          * If true, the  fieldset will display as invalid.
         */
        "invalid"?: boolean;
        /**
          * Sets the text of the fieldset label (caption).
         */
        "label"?: string;
        /**
          * Can be set to specify if the fieldset can be resized by the user.
         */
        "resizable"?: "none" | "both" | "horizontal" | "vertical" | "block" | "inline";
    }
    /**
     * Allows cropping an image in-browser with the option to enforce a specific final size.
     * All computation happens in the browser and the final image is emmited
     * in an event that has a data-url of the image.
     */
    interface DnnImageCropper {
        /**
          * Sets the desired final image height.
         */
        "height"?: number;
        /**
          * The name of the control when used in a form.
         */
        "name"?: string;
        /**
          * When the image crop changes, emits the dataurl for the new cropped image.
         */
        "onImageCropChanged"?: (event: DnnImageCropperCustomEvent<string>) => void;
        /**
          * Emits both when a file is initially select and when the crop has changed. Compared to imageCropChanged, this event emits the file itself, which can be useful for uploading the file to a server including its name.
         */
        "onImageFileCropChanged"?: (event: DnnImageCropperCustomEvent<File>) => void;
        /**
          * When set to true, prevents cropping an image smaller than the required size, which would blow pixel and make the final picture look blurry.
         */
        "preventUndersized"?: boolean;
        /**
          * Sets the output quality of the cropped image (number between 0 and 1).
         */
        "quality"?: number;
        /**
          * Can be used to customize controls text. Some values support tokens, see default values for examples.
         */
        "resx"?: ImageCropperResx;
        /**
          * Sets the desired final image width.
         */
        "width"?: number;
    }
    /**
     * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
     */
    interface DnnInput {
        /**
          * If true, enables users to switch between a password and a text field (to view their password).
         */
        "allowShowPassword"?: boolean;
        /**
          * Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete.
         */
        "autocomplete"?: string;
        /**
          * @deprecated This control has it's own validation reporting, will be removed in v0.25.0
         */
        "disableValidityReporting"?: boolean;
        /**
          * Defines whether the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText"?: string;
        /**
          * Hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard.
         */
        "inputmode"?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
        /**
          * The label for this input.
         */
        "label"?: string;
        /**
          * Defines the maximum allowed value.
         */
        "max"?: number | string;
        /**
          * Defines the maximum amount of charaters.
         */
        "maxlength"?: number;
        /**
          * Defines the minimum allowed value.
         */
        "min"?: number | string;
        /**
          * Defines the minimum amount of charaters.
         */
        "minlength"?: number;
        /**
          * If true, allows multiple emails to be entered separated by commas.
         */
        "multiple"?: boolean;
        /**
          * The name for this input when used in forms.
         */
        "name"?: string;
        /**
          * Fires when the value has changed and the user exits the input.
         */
        "onValueChange"?: (event: DnnInputCustomEvent<number | string | string[]>) => void;
        /**
          * Fires when the using is inputing data (on keystrokes).
         */
        "onValueInput"?: (event: DnnInputCustomEvent<number | string | string[]>) => void;
        /**
          * Valid for text, search, url, tel, email, and password, the pattern attribute defines a regular expression that the input's value must match in order for the value to pass constraint validation.
         */
        "pattern"?: string;
        /**
          * Defines wheter the defined value is readonly.
         */
        "readonly"?: boolean;
        /**
          * Defines whether the field requires having a value.
         */
        "required"?: boolean;
        /**
          * Defines the possible steps for numbers and dates/times. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#step
         */
        "step"?: string | number;
        /**
          * The input type, supports most of html standard input type, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types.
         */
        "type"?: "date" | "datetime-local" | "email" | "number" | "password" | "tel" | "text" | "time" | "url" | "search";
        /**
          * The value of the input.
         */
        "value"?: number | string | string[];
    }
    interface DnnModal {
        /**
          * Pass false to remove the backdrop click auto-dismiss feature.
         */
        "backdropDismiss"?: boolean;
        /**
          * Optionally pass the aria-label text for the close button. Defaults to "Close modal" if not provided.
         */
        "closeText"?: string;
        /**
          * Fires when the modal is dismissed.
         */
        "onDismissed"?: (event: DnnModalCustomEvent<any>) => void;
        /**
          * If set to true, the modal becomes resizable.
         */
        "resizable"?: boolean;
        /**
          * Optionally you can pass false to not show the close button. If you decide to do so, you should either not also prevent dismissal by clicking the backdrop or provide your own dismissal logic in the modal content.
         */
        "showCloseButton"?: boolean;
        /**
          * Reflects the visible state of the modal.
         */
        "visible"?: boolean;
    }
    interface DnnMonacoEditor {
        /**
          * Defines the language for the editor.
         */
        "language"?: "plaintext" | "bat" | "coffeescript" | "c" | "cpp" | "csharp" | "dockerfile" | "fsharp" | "go" | "handlebars" | "html" | "ini" | "pug" | "java" | "lua" | "markdown" | "msdax" | "objective-c" | "postiats" | "php" | "powershell" | "python" | "r" | "razor" | "ruby" | "swift" | "sql" | "vb" | "xml" | "less" | "scss" | "css" | "yaml" | "sol" | "sb" | "json" | "typescript" | "javascript";
        /**
          * The name of the control to use for forms.
         */
        "name"?: string;
        /**
          * Emits the new value of the content when it is changed.
         */
        "onContentChanged"?: (event: DnnMonacoEditorCustomEvent<string>) => void;
        /**
          * Sets the code contained in the editor
         */
        "value"?: string;
    }
    interface DnnPermissionsGrid {
        /**
          * The list of users to show under the search users field when a search is performed.
         */
        "foundUsers"?: ISearchedUser[];
        /**
          * Fires when any permissions have changed, can be used for instance to have linked permissions.
         */
        "onPermissionsChanged"?: (event: DnnPermissionsGridCustomEvent<IPermissions>) => void;
        /**
          * Fires when searching for users to add to the permissions. Emits the search query.
         */
        "onUserSearchQueryChanged"?: (event: DnnPermissionsGridCustomEvent<string>) => void;
        /**
          * The list of permissions.
         */
        "permissions": IPermissions;
        /**
          * Optionally allows localizing the component strings.
         */
        "resx"?: ILocalization;
        /**
          * The list of role groups.
         */
        "roleGroups": IRoleGroup[];
        /**
          * The list of possible roles.
         */
        "roles": IRole[];
    }
    interface DnnProgressBar {
        /**
          * Sets the max value for the progress bar.
         */
        "max"?: number;
        /**
          * Determines if gradient colors will be used for progress bar.
         */
        "useGradient"?: boolean;
        /**
          * Sets to current value for the progress bar.
         */
        "value"?: number;
    }
    interface DnnRichtext {
        /**
          * Name of the field when used in a form.
         */
        "name"?: string;
        /**
          * Fires when the value changed.
         */
        "onValueChange"?: (event: DnnRichtextCustomEvent<string>) => void;
        /**
          * Fires during value input.
         */
        "onValueInput"?: (event: DnnRichtextCustomEvent<string>) => void;
        /**
          * Optional configuration for Jodit, see https://xdsoft.net/jodit/docs/classes/config.Config.html
         */
        "options"?: Config;
        /**
          * Sets the value of the content of the editor.
         */
        "value"?: string;
    }
    interface DnnSearchbox {
        /**
          * How many milliseconds to wait before firing the queryChanged event.
         */
        "debounceTime"?: number;
        /**
          * @deprecated Use debounceTime (or debounce-time) instead. Will be removed in v0.25.0 Debounces the queryChanged by 500ms.
         */
        "debounced"?: boolean;
        /**
          * Fires up each time the search query changes. The data passed is the new query.
         */
        "onQueryChanged"?: (event: DnnSearchboxCustomEvent<string>) => void;
        /**
          * Sets the field placeholder text.
         */
        "placeholder"?: string;
        /**
          * Sets the query
         */
        "query"?: string;
    }
    interface DnnSelect {
        /**
          * Defines the type of automatic completion the browser can use. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
         */
        "autocomplete"?: string;
        /**
          * @deprecated This control has its own validatin reporting, will be removed in v0.25.0
         */
        "disableValidityReporting"?: boolean;
        /**
          * Defines whether the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText"?: string;
        /**
          * The label for this input.
         */
        "label"?: string;
        /**
          * The name for this input, if used in forms.
         */
        "name"?: string;
        /**
          * Fires when the value has changed and the user exits the input.
         */
        "onValueChange"?: (event: DnnSelectCustomEvent<string>) => void;
        /**
          * Defines whether the field requires having a value.
         */
        "required"?: boolean;
        /**
          * The value of the input.
         */
        "value"?: string;
    }
    interface DnnSortIcon {
        /**
          * Emitted when the sort is changed.
         */
        "onSortChanged"?: (event: DnnSortIconCustomEvent<"asc"|"desc"|"none">) => void;
        /**
          * Defines the current sort direction
         */
        "sortDirection"?: "asc" | "desc" | "none";
    }
    /**
     * Represents a single tab and must be used inside a dnn-tabs element.
     */
    interface DnnTab {
        /**
          * Defines the tab title.
         */
        "tabTitle": string;
    }
    interface DnnTabs {
    }
    /**
     * A custom textarea component.
     */
    interface DnnTextarea {
        /**
          * Defines the type of auto-completion to use for this field, see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete.
         */
        "autocomplete"?: string;
        /**
          * Defines whether the field is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defines the help label displayed under the field.
         */
        "helpText"?: string;
        /**
          * The label for this input.
         */
        "label"?: string;
        /**
          * Defines the maximum amount of charaters.
         */
        "maxlength"?: number;
        /**
          * Defines the minimum amount of charaters.
         */
        "minlength"?: number;
        /**
          * The name for this input when used in forms.
         */
        "name"?: string;
        /**
          * Fires when the value has changed and the user exits the input.
         */
        "onValueChange"?: (event: DnnTextareaCustomEvent<string>) => void;
        /**
          * Fires when the using is inputing data (on keystrokes).
         */
        "onValueInput"?: (event: DnnTextareaCustomEvent<string>) => void;
        /**
          * Defines wheter the defined value is readonly.
         */
        "readonly"?: boolean;
        /**
          * Defines whether the field requires having a value.
         */
        "required"?: boolean;
        /**
          * Can be set to change how the user can resize the field.
         */
        "resizable"?: "none" | "both" | "horizontal" | "vertical" | "block" | "inline";
        /**
          * Defines how many rows (lines of text) to initially show.
         */
        "rows"?: number;
        /**
          * Sets the value of the textarea.
         */
        "value"?: string;
    }
    interface DnnToggle {
        /**
          * If 'true' the toggle is checked (on).
         */
        "checked"?: boolean;
        /**
          * If 'true' the toggle is not be interacted with.
         */
        "disabled"?: boolean;
        /**
          * The field name to use in forms.
         */
        "name"?: string;
        /**
          * Fires when the toggle changed
         */
        "onCheckChanged"?: (event: DnnToggleCustomEvent<DnnToggleChangeEventDetail>) => void;
        /**
          * The value to post when used in forms.
         */
        "value"?: string;
    }
    interface DnnTreeviewItem {
        /**
          * Defines if the current node is expanded.
         */
        "expanded"?: boolean;
        /**
          * Fires when the user collapses a node.
         */
        "onUserCollapsed"?: (event: DnnTreeviewItemCustomEvent<void>) => void;
        /**
          * Fires when the user expands a node.
         */
        "onUserExpanded"?: (event: DnnTreeviewItemCustomEvent<void>) => void;
    }
    /**
     * A component that shows a vertical list of items as they fit. When they don't all fit, it puts the ones that don't fit into a dropdown menu.
     */
    interface DnnVerticalOverflowMenu {
    }
    interface DnnVerticalSplitview {
        /**
          * Fires when the width of the divider changes.
         */
        "onWidthChanged"?: (event: DnnVerticalSplitviewCustomEvent<number>) => void;
        /**
          * The percentage position of the splitter in the container.
         */
        "splitWidthPercentage"?: number;
        /**
          * The width of the splitter area.
         */
        "splitterWidth"?: number;
    }
    interface IntrinsicElements {
        "dnn-autocomplete": DnnAutocomplete;
        "dnn-button": DnnButton;
        "dnn-checkbox": DnnCheckbox;
        "dnn-chevron": DnnChevron;
        "dnn-collapsible": DnnCollapsible;
        "dnn-color-input": DnnColorInput;
        "dnn-color-picker": DnnColorPicker;
        "dnn-dropzone": DnnDropzone;
        "dnn-example-form": DnnExampleForm;
        "dnn-fieldset": DnnFieldset;
        "dnn-image-cropper": DnnImageCropper;
        "dnn-input": DnnInput;
        "dnn-modal": DnnModal;
        "dnn-monaco-editor": DnnMonacoEditor;
        "dnn-permissions-grid": DnnPermissionsGrid;
        "dnn-progress-bar": DnnProgressBar;
        "dnn-richtext": DnnRichtext;
        "dnn-searchbox": DnnSearchbox;
        "dnn-select": DnnSelect;
        "dnn-sort-icon": DnnSortIcon;
        "dnn-tab": DnnTab;
        "dnn-tabs": DnnTabs;
        "dnn-textarea": DnnTextarea;
        "dnn-toggle": DnnToggle;
        "dnn-treeview-item": DnnTreeviewItem;
        "dnn-vertical-overflow-menu": DnnVerticalOverflowMenu;
        "dnn-vertical-splitview": DnnVerticalSplitview;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dnn-autocomplete": LocalJSX.DnnAutocomplete & JSXBase.HTMLAttributes<HTMLDnnAutocompleteElement>;
            "dnn-button": LocalJSX.DnnButton & JSXBase.HTMLAttributes<HTMLDnnButtonElement>;
            /**
             * @deprecated - The label for the checkbox - Obsolete, implement your own label.
             */
            "dnn-checkbox": LocalJSX.DnnCheckbox & JSXBase.HTMLAttributes<HTMLDnnCheckboxElement>;
            "dnn-chevron": LocalJSX.DnnChevron & JSXBase.HTMLAttributes<HTMLDnnChevronElement>;
            "dnn-collapsible": LocalJSX.DnnCollapsible & JSXBase.HTMLAttributes<HTMLDnnCollapsibleElement>;
            /**
             * A custom input component that allows previewing and changing a color value.
             */
            "dnn-color-input": LocalJSX.DnnColorInput & JSXBase.HTMLAttributes<HTMLDnnColorInputElement>;
            /**
             * Color Picker for Dnn
             */
            "dnn-color-picker": LocalJSX.DnnColorPicker & JSXBase.HTMLAttributes<HTMLDnnColorPickerElement>;
            "dnn-dropzone": LocalJSX.DnnDropzone & JSXBase.HTMLAttributes<HTMLDnnDropzoneElement>;
            /**
             * Do not use this component in production, it is meant for testing purposes only and is not distributed in the production package.
             */
            "dnn-example-form": LocalJSX.DnnExampleForm & JSXBase.HTMLAttributes<HTMLDnnExampleFormElement>;
            /**
             * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
             */
            "dnn-fieldset": LocalJSX.DnnFieldset & JSXBase.HTMLAttributes<HTMLDnnFieldsetElement>;
            /**
             * Allows cropping an image in-browser with the option to enforce a specific final size.
             * All computation happens in the browser and the final image is emmited
             * in an event that has a data-url of the image.
             */
            "dnn-image-cropper": LocalJSX.DnnImageCropper & JSXBase.HTMLAttributes<HTMLDnnImageCropperElement>;
            /**
             * A custom input component that wraps the html input element is a mobile friendly component that supports a label, some help text and other features.
             */
            "dnn-input": LocalJSX.DnnInput & JSXBase.HTMLAttributes<HTMLDnnInputElement>;
            "dnn-modal": LocalJSX.DnnModal & JSXBase.HTMLAttributes<HTMLDnnModalElement>;
            "dnn-monaco-editor": LocalJSX.DnnMonacoEditor & JSXBase.HTMLAttributes<HTMLDnnMonacoEditorElement>;
            "dnn-permissions-grid": LocalJSX.DnnPermissionsGrid & JSXBase.HTMLAttributes<HTMLDnnPermissionsGridElement>;
            "dnn-progress-bar": LocalJSX.DnnProgressBar & JSXBase.HTMLAttributes<HTMLDnnProgressBarElement>;
            "dnn-richtext": LocalJSX.DnnRichtext & JSXBase.HTMLAttributes<HTMLDnnRichtextElement>;
            "dnn-searchbox": LocalJSX.DnnSearchbox & JSXBase.HTMLAttributes<HTMLDnnSearchboxElement>;
            "dnn-select": LocalJSX.DnnSelect & JSXBase.HTMLAttributes<HTMLDnnSelectElement>;
            "dnn-sort-icon": LocalJSX.DnnSortIcon & JSXBase.HTMLAttributes<HTMLDnnSortIconElement>;
            /**
             * Represents a single tab and must be used inside a dnn-tabs element.
             */
            "dnn-tab": LocalJSX.DnnTab & JSXBase.HTMLAttributes<HTMLDnnTabElement>;
            "dnn-tabs": LocalJSX.DnnTabs & JSXBase.HTMLAttributes<HTMLDnnTabsElement>;
            /**
             * A custom textarea component.
             */
            "dnn-textarea": LocalJSX.DnnTextarea & JSXBase.HTMLAttributes<HTMLDnnTextareaElement>;
            "dnn-toggle": LocalJSX.DnnToggle & JSXBase.HTMLAttributes<HTMLDnnToggleElement>;
            "dnn-treeview-item": LocalJSX.DnnTreeviewItem & JSXBase.HTMLAttributes<HTMLDnnTreeviewItemElement>;
            /**
             * A component that shows a vertical list of items as they fit. When they don't all fit, it puts the ones that don't fit into a dropdown menu.
             */
            "dnn-vertical-overflow-menu": LocalJSX.DnnVerticalOverflowMenu & JSXBase.HTMLAttributes<HTMLDnnVerticalOverflowMenuElement>;
            "dnn-vertical-splitview": LocalJSX.DnnVerticalSplitview & JSXBase.HTMLAttributes<HTMLDnnVerticalSplitviewElement>;
        }
    }
}
